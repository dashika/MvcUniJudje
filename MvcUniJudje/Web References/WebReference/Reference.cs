//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18408
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace MvcUniJudje.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IServiceForAdmin", Namespace="http://tempuri.org/")]
    public partial class ServiceForAdmin : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionAPIOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDatabaseExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDictionariesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateNewUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOneUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlockGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnBlockGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteGroupUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebUpdateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateGroupsForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendPasswordOnEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordUsingUserEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserOutGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContestsInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebUpdateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOutFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompilersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompilerOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrUpdateCompilerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCompilerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubmitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebGetSubmitsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubmitUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitShowCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitShowAdminLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitShowUserLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejudgeSubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubjectComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskPdfStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskPdfStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTaskPdfStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTaskExOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNewSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNewComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIDSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIDComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTitleSubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTitleComlexityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateCheckerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCheckerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCheckerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContestsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateGroupsForContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCompilersForContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTasksForContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWellcomeTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWellcomeTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSponsorTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSponsorTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContestTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLogForUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrUpdateSettingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdminsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCollectionButtonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateNewAdminPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewPasswordForAdminAndSendByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewPasswordUsebleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebUpdateAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback AccessAdminsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceForAdmin() {
            this.Url = global::MvcUniJudje.Properties.Settings.Default.MvcUniJudje_WebReference_ServiceForAdmin;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginUserCompletedEventHandler LoginUserCompleted;
        
        /// <remarks/>
        public event GetVersionAPICompletedEventHandler GetVersionAPICompleted;
        
        /// <remarks/>
        public event CheckDatabaseExistCompletedEventHandler CheckDatabaseExistCompleted;
        
        /// <remarks/>
        public event GetDictionariesCompletedEventHandler GetDictionariesCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event GetUserCompletedEventHandler GetUserCompleted;
        
        /// <remarks/>
        public event GetUserPasswordCompletedEventHandler GetUserPasswordCompleted;
        
        /// <remarks/>
        public event GenerateNewUserPasswordCompletedEventHandler GenerateNewUserPasswordCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event CreateOneUserCompletedEventHandler CreateOneUserCompleted;
        
        /// <remarks/>
        public event BlockGroupUserCompletedEventHandler BlockGroupUserCompleted;
        
        /// <remarks/>
        public event UnBlockGroupUserCompletedEventHandler UnBlockGroupUserCompleted;
        
        /// <remarks/>
        public event DeleteGroupUserCompletedEventHandler DeleteGroupUserCompleted;
        
        /// <remarks/>
        public event UpdateUserCompletedEventHandler UpdateUserCompleted;
        
        /// <remarks/>
        public event WebUpdateUserCompletedEventHandler WebUpdateUserCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event UpdateGroupsForUserCompletedEventHandler UpdateGroupsForUserCompleted;
        
        /// <remarks/>
        public event SendPasswordOnEmailCompletedEventHandler SendPasswordOnEmailCompleted;
        
        /// <remarks/>
        public event ValidateUserEmailCompletedEventHandler ValidateUserEmailCompleted;
        
        /// <remarks/>
        public event ChangePasswordUsingUserEmailCompletedEventHandler ChangePasswordUsingUserEmailCompleted;
        
        /// <remarks/>
        public event GetAllGroupsCompletedEventHandler GetAllGroupsCompleted;
        
        /// <remarks/>
        public event GetAllUserInGroupCompletedEventHandler GetAllUserInGroupCompleted;
        
        /// <remarks/>
        public event GetAllUserOutGroupCompletedEventHandler GetAllUserOutGroupCompleted;
        
        /// <remarks/>
        public event GetGroupInfoCompletedEventHandler GetGroupInfoCompleted;
        
        /// <remarks/>
        public event GetContestsInGroupCompletedEventHandler GetContestsInGroupCompleted;
        
        /// <remarks/>
        public event CreateGroupCompletedEventHandler CreateGroupCompleted;
        
        /// <remarks/>
        public event UpdateGroupCompletedEventHandler UpdateGroupCompleted;
        
        /// <remarks/>
        public event WebUpdateGroupCompletedEventHandler WebUpdateGroupCompleted;
        
        /// <remarks/>
        public event DeleteGroupCompletedEventHandler DeleteGroupCompleted;
        
        /// <remarks/>
        public event AddInGroupCompletedEventHandler AddInGroupCompleted;
        
        /// <remarks/>
        public event DeleteOutFromGroupCompletedEventHandler DeleteOutFromGroupCompleted;
        
        /// <remarks/>
        public event GetCompilersCompletedEventHandler GetCompilersCompleted;
        
        /// <remarks/>
        public event GetCompilerCompletedEventHandler GetCompilerCompleted;
        
        /// <remarks/>
        public event InsertOrUpdateCompilerCompletedEventHandler InsertOrUpdateCompilerCompleted;
        
        /// <remarks/>
        public event DeleteCompilerCompletedEventHandler DeleteCompilerCompleted;
        
        /// <remarks/>
        public event GetSubmitsCompletedEventHandler GetSubmitsCompleted;
        
        /// <remarks/>
        public event WebGetSubmitsCompletedEventHandler WebGetSubmitsCompleted;
        
        /// <remarks/>
        public event GetSubmitUpdateCompletedEventHandler GetSubmitUpdateCompleted;
        
        /// <remarks/>
        public event SubmitShowCodeCompletedEventHandler SubmitShowCodeCompleted;
        
        /// <remarks/>
        public event SubmitShowAdminLogCompletedEventHandler SubmitShowAdminLogCompleted;
        
        /// <remarks/>
        public event SubmitShowUserLogCompletedEventHandler SubmitShowUserLogCompleted;
        
        /// <remarks/>
        public event RejudgeSubmitCompletedEventHandler RejudgeSubmitCompleted;
        
        /// <remarks/>
        public event DeleteSubmitCompletedEventHandler DeleteSubmitCompleted;
        
        /// <remarks/>
        public event GetTasksCompletedEventHandler GetTasksCompleted;
        
        /// <remarks/>
        public event GetTaskCompletedEventHandler GetTaskCompleted;
        
        /// <remarks/>
        public event GetTasksComlexityCompletedEventHandler GetTasksComlexityCompleted;
        
        /// <remarks/>
        public event GetTasksSubjectCompletedEventHandler GetTasksSubjectCompleted;
        
        /// <remarks/>
        public event GetTaskStatementCompletedEventHandler GetTaskStatementCompleted;
        
        /// <remarks/>
        public event CreateTaskCompletedEventHandler CreateTaskCompleted;
        
        /// <remarks/>
        public event GetSubjectCompletedEventHandler GetSubjectCompleted;
        
        /// <remarks/>
        public event UpdateTaskStatementCompletedEventHandler UpdateTaskStatementCompleted;
        
        /// <remarks/>
        public event UpdateSubjectComlexityCompletedEventHandler UpdateSubjectComlexityCompleted;
        
        /// <remarks/>
        public event UpdateTaskPdfStatementCompletedEventHandler UpdateTaskPdfStatementCompleted;
        
        /// <remarks/>
        public event DeleteTaskPdfStatementCompletedEventHandler DeleteTaskPdfStatementCompleted;
        
        /// <remarks/>
        public event DownloadTaskPdfStatementCompletedEventHandler DownloadTaskPdfStatementCompleted;
        
        /// <remarks/>
        public event UpdateTaskCompletedEventHandler UpdateTaskCompleted;
        
        /// <remarks/>
        public event DeleteTaskCompletedEventHandler DeleteTaskCompleted;
        
        /// <remarks/>
        public event UpdateTaskExCompletedEventHandler UpdateTaskExCompleted;
        
        /// <remarks/>
        public event AddNewSubjectCompletedEventHandler AddNewSubjectCompleted;
        
        /// <remarks/>
        public event AddNewComlexityCompletedEventHandler AddNewComlexityCompleted;
        
        /// <remarks/>
        public event DeleteSubjectCompletedEventHandler DeleteSubjectCompleted;
        
        /// <remarks/>
        public event DeleteComlexityCompletedEventHandler DeleteComlexityCompleted;
        
        /// <remarks/>
        public event UpdateNewSubjectCompletedEventHandler UpdateNewSubjectCompleted;
        
        /// <remarks/>
        public event UpdateNewComlexityCompletedEventHandler UpdateNewComlexityCompleted;
        
        /// <remarks/>
        public event GetIDSubjectCompletedEventHandler GetIDSubjectCompleted;
        
        /// <remarks/>
        public event GetIDComlexityCompletedEventHandler GetIDComlexityCompleted;
        
        /// <remarks/>
        public event GetTitleSubjectCompletedEventHandler GetTitleSubjectCompleted;
        
        /// <remarks/>
        public event GetTitleComlexityCompletedEventHandler GetTitleComlexityCompleted;
        
        /// <remarks/>
        public event GetTestCompletedEventHandler GetTestCompleted;
        
        /// <remarks/>
        public event CreateTestCompletedEventHandler CreateTestCompleted;
        
        /// <remarks/>
        public event UpdateTestCompletedEventHandler UpdateTestCompleted;
        
        /// <remarks/>
        public event DeleteTestCompletedEventHandler DeleteTestCompleted;
        
        /// <remarks/>
        public event GetCheckerCompletedEventHandler GetCheckerCompleted;
        
        /// <remarks/>
        public event CreateCheckerCompletedEventHandler CreateCheckerCompleted;
        
        /// <remarks/>
        public event UpdateCheckerCompletedEventHandler UpdateCheckerCompleted;
        
        /// <remarks/>
        public event DeleteCheckerCompletedEventHandler DeleteCheckerCompleted;
        
        /// <remarks/>
        public event GetContestsCompletedEventHandler GetContestsCompleted;
        
        /// <remarks/>
        public event GetContestCompletedEventHandler GetContestCompleted;
        
        /// <remarks/>
        public event UpdateContestCompletedEventHandler UpdateContestCompleted;
        
        /// <remarks/>
        public event UpdateGroupsForContestCompletedEventHandler UpdateGroupsForContestCompleted;
        
        /// <remarks/>
        public event UpdateCompilersForContestCompletedEventHandler UpdateCompilersForContestCompleted;
        
        /// <remarks/>
        public event UpdateTasksForContestCompletedEventHandler UpdateTasksForContestCompleted;
        
        /// <remarks/>
        public event CreateContestCompletedEventHandler CreateContestCompleted;
        
        /// <remarks/>
        public event DeleteContestCompletedEventHandler DeleteContestCompleted;
        
        /// <remarks/>
        public event GetWellcomeTextCompletedEventHandler GetWellcomeTextCompleted;
        
        /// <remarks/>
        public event UpdateWellcomeTextCompletedEventHandler UpdateWellcomeTextCompleted;
        
        /// <remarks/>
        public event GetSponsorTextCompletedEventHandler GetSponsorTextCompleted;
        
        /// <remarks/>
        public event UpdateSponsorTextCompletedEventHandler UpdateSponsorTextCompleted;
        
        /// <remarks/>
        public event GetContestTypesCompletedEventHandler GetContestTypesCompleted;
        
        /// <remarks/>
        public event GetLogForUserCompletedEventHandler GetLogForUserCompleted;
        
        /// <remarks/>
        public event GetAllSettingsCompletedEventHandler GetAllSettingsCompleted;
        
        /// <remarks/>
        public event DeleteSettingCompletedEventHandler DeleteSettingCompleted;
        
        /// <remarks/>
        public event AddOrUpdateSettingCompletedEventHandler AddOrUpdateSettingCompleted;
        
        /// <remarks/>
        public event GetAdminsCompletedEventHandler GetAdminsCompleted;
        
        /// <remarks/>
        public event GetCollectionCompletedEventHandler GetCollectionCompleted;
        
        /// <remarks/>
        public event GetAdminCompletedEventHandler GetAdminCompleted;
        
        /// <remarks/>
        public event GetCollectionAccessCompletedEventHandler GetCollectionAccessCompleted;
        
        /// <remarks/>
        public event GetCollectionButtonsCompletedEventHandler GetCollectionButtonsCompleted;
        
        /// <remarks/>
        public event GenerateNewAdminPasswordCompletedEventHandler GenerateNewAdminPasswordCompleted;
        
        /// <remarks/>
        public event GetNewPasswordForAdminAndSendByEmailCompletedEventHandler GetNewPasswordForAdminAndSendByEmailCompleted;
        
        /// <remarks/>
        public event CreateNewPasswordUsebleCompletedEventHandler CreateNewPasswordUsebleCompleted;
        
        /// <remarks/>
        public event CreateAdminCompletedEventHandler CreateAdminCompleted;
        
        /// <remarks/>
        public event UpdateAdminCompletedEventHandler UpdateAdminCompleted;
        
        /// <remarks/>
        public event WebUpdateAdminCompletedEventHandler WebUpdateAdminCompleted;
        
        /// <remarks/>
        public event DeleteAdminCompletedEventHandler DeleteAdminCompleted;
        
        /// <remarks/>
        public event AccessAdminsCompletedEventHandler AccessAdminsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/LoginUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string LoginUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Login, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Password) {
            object[] results = this.Invoke("LoginUser", new object[] {
                        Login,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginUserAsync(string Login, string Password) {
            this.LoginUserAsync(Login, Password, null);
        }
        
        /// <remarks/>
        public void LoginUserAsync(string Login, string Password, object userState) {
            if ((this.LoginUserOperationCompleted == null)) {
                this.LoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginUserOperationCompleted);
            }
            this.InvokeAsync("LoginUser", new object[] {
                        Login,
                        Password}, this.LoginUserOperationCompleted, userState);
        }
        
        private void OnLoginUserOperationCompleted(object arg) {
            if ((this.LoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetVersionAPI", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetVersionAPI(out int GetVersionAPIResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetVersionAPIResultSpecified) {
            object[] results = this.Invoke("GetVersionAPI", new object[0]);
            GetVersionAPIResult = ((int)(results[0]));
            GetVersionAPIResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetVersionAPIAsync() {
            this.GetVersionAPIAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAPIAsync(object userState) {
            if ((this.GetVersionAPIOperationCompleted == null)) {
                this.GetVersionAPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionAPIOperationCompleted);
            }
            this.InvokeAsync("GetVersionAPI", new object[0], this.GetVersionAPIOperationCompleted, userState);
        }
        
        private void OnGetVersionAPIOperationCompleted(object arg) {
            if ((this.GetVersionAPICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionAPICompleted(this, new GetVersionAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CheckDatabaseExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckDatabaseExist(out bool CheckDatabaseExistResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool CheckDatabaseExistResultSpecified) {
            object[] results = this.Invoke("CheckDatabaseExist", new object[0]);
            CheckDatabaseExistResult = ((bool)(results[0]));
            CheckDatabaseExistResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void CheckDatabaseExistAsync() {
            this.CheckDatabaseExistAsync(null);
        }
        
        /// <remarks/>
        public void CheckDatabaseExistAsync(object userState) {
            if ((this.CheckDatabaseExistOperationCompleted == null)) {
                this.CheckDatabaseExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDatabaseExistOperationCompleted);
            }
            this.InvokeAsync("CheckDatabaseExist", new object[0], this.CheckDatabaseExistOperationCompleted, userState);
        }
        
        private void OnCheckDatabaseExistOperationCompleted(object arg) {
            if ((this.CheckDatabaseExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDatabaseExistCompleted(this, new CheckDatabaseExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetDictionaries", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public DictionaryCollectionDTO GetDictionaries([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, bool IncludeContests, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IncludeContestsSpecified, bool IncludeTasks, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IncludeTasksSpecified, bool IncludeUsers, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IncludeUsersSpecified) {
            object[] results = this.Invoke("GetDictionaries", new object[] {
                        SessionKey,
                        IncludeContests,
                        IncludeContestsSpecified,
                        IncludeTasks,
                        IncludeTasksSpecified,
                        IncludeUsers,
                        IncludeUsersSpecified});
            return ((DictionaryCollectionDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetDictionariesAsync(string SessionKey, bool IncludeContests, bool IncludeContestsSpecified, bool IncludeTasks, bool IncludeTasksSpecified, bool IncludeUsers, bool IncludeUsersSpecified) {
            this.GetDictionariesAsync(SessionKey, IncludeContests, IncludeContestsSpecified, IncludeTasks, IncludeTasksSpecified, IncludeUsers, IncludeUsersSpecified, null);
        }
        
        /// <remarks/>
        public void GetDictionariesAsync(string SessionKey, bool IncludeContests, bool IncludeContestsSpecified, bool IncludeTasks, bool IncludeTasksSpecified, bool IncludeUsers, bool IncludeUsersSpecified, object userState) {
            if ((this.GetDictionariesOperationCompleted == null)) {
                this.GetDictionariesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDictionariesOperationCompleted);
            }
            this.InvokeAsync("GetDictionaries", new object[] {
                        SessionKey,
                        IncludeContests,
                        IncludeContestsSpecified,
                        IncludeTasks,
                        IncludeTasksSpecified,
                        IncludeUsers,
                        IncludeUsersSpecified}, this.GetDictionariesOperationCompleted, userState);
        }
        
        private void OnGetDictionariesOperationCompleted(object arg) {
            if ((this.GetDictionariesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDictionariesCompleted(this, new GetDictionariesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public UserDTO[] GetUsers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetUsers", new object[] {
                        SessionKey});
            return ((UserDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync(string SessionKey) {
            this.GetUsersAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(string SessionKey, object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[] {
                        SessionKey}, this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public UserExDTO GetUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified) {
            object[] results = this.Invoke("GetUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified});
            return ((UserExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAsync(string SessionKey, int UserId, bool UserIdSpecified) {
            this.GetUserAsync(SessionKey, UserId, UserIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetUserAsync(string SessionKey, int UserId, bool UserIdSpecified, object userState) {
            if ((this.GetUserOperationCompleted == null)) {
                this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserOperationCompleted);
            }
            this.InvokeAsync("GetUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified}, this.GetUserOperationCompleted, userState);
        }
        
        private void OnGetUserOperationCompleted(object arg) {
            if ((this.GetUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetUserPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetUserPassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string key) {
            object[] results = this.Invoke("GetUserPassword", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified,
                        key});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPasswordAsync(string SessionKey, int UserId, bool UserIdSpecified, string key) {
            this.GetUserPasswordAsync(SessionKey, UserId, UserIdSpecified, key, null);
        }
        
        /// <remarks/>
        public void GetUserPasswordAsync(string SessionKey, int UserId, bool UserIdSpecified, string key, object userState) {
            if ((this.GetUserPasswordOperationCompleted == null)) {
                this.GetUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPasswordOperationCompleted);
            }
            this.InvokeAsync("GetUserPassword", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified,
                        key}, this.GetUserPasswordOperationCompleted, userState);
        }
        
        private void OnGetUserPasswordOperationCompleted(object arg) {
            if ((this.GetUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPasswordCompleted(this, new GetUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GenerateNewUserPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GenerateNewUserPassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified) {
            object[] results = this.Invoke("GenerateNewUserPassword", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateNewUserPasswordAsync(string SessionKey, int UserId, bool UserIdSpecified) {
            this.GenerateNewUserPasswordAsync(SessionKey, UserId, UserIdSpecified, null);
        }
        
        /// <remarks/>
        public void GenerateNewUserPasswordAsync(string SessionKey, int UserId, bool UserIdSpecified, object userState) {
            if ((this.GenerateNewUserPasswordOperationCompleted == null)) {
                this.GenerateNewUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateNewUserPasswordOperationCompleted);
            }
            this.InvokeAsync("GenerateNewUserPassword", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified}, this.GenerateNewUserPasswordOperationCompleted, userState);
        }
        
        private void OnGenerateNewUserPasswordOperationCompleted(object arg) {
            if ((this.GenerateNewUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateNewUserPasswordCompleted(this, new GenerateNewUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public UserExDTO CreateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        SessionKey});
            return ((UserExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(string SessionKey) {
            this.CreateUserAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(string SessionKey, object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        SessionKey}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateOneUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateOneUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] UserExDTO Data) {
            this.Invoke("CreateOneUser", new object[] {
                        SessionKey,
                        Data});
        }
        
        /// <remarks/>
        public void CreateOneUserAsync(string SessionKey, UserExDTO Data) {
            this.CreateOneUserAsync(SessionKey, Data, null);
        }
        
        /// <remarks/>
        public void CreateOneUserAsync(string SessionKey, UserExDTO Data, object userState) {
            if ((this.CreateOneUserOperationCompleted == null)) {
                this.CreateOneUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOneUserOperationCompleted);
            }
            this.InvokeAsync("CreateOneUser", new object[] {
                        SessionKey,
                        Data}, this.CreateOneUserOperationCompleted, userState);
        }
        
        private void OnCreateOneUserOperationCompleted(object arg) {
            if ((this.CreateOneUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOneUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/BlockGroupUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BlockGroupUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] id, System.DateTime date, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateSpecified) {
            this.Invoke("BlockGroupUser", new object[] {
                        SessionKey,
                        id,
                        date,
                        dateSpecified});
        }
        
        /// <remarks/>
        public void BlockGroupUserAsync(string SessionKey, int[] id, System.DateTime date, bool dateSpecified) {
            this.BlockGroupUserAsync(SessionKey, id, date, dateSpecified, null);
        }
        
        /// <remarks/>
        public void BlockGroupUserAsync(string SessionKey, int[] id, System.DateTime date, bool dateSpecified, object userState) {
            if ((this.BlockGroupUserOperationCompleted == null)) {
                this.BlockGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockGroupUserOperationCompleted);
            }
            this.InvokeAsync("BlockGroupUser", new object[] {
                        SessionKey,
                        id,
                        date,
                        dateSpecified}, this.BlockGroupUserOperationCompleted, userState);
        }
        
        private void OnBlockGroupUserOperationCompleted(object arg) {
            if ((this.BlockGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockGroupUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UnBlockGroupUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnBlockGroupUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] id) {
            this.Invoke("UnBlockGroupUser", new object[] {
                        SessionKey,
                        id});
        }
        
        /// <remarks/>
        public void UnBlockGroupUserAsync(string SessionKey, int[] id) {
            this.UnBlockGroupUserAsync(SessionKey, id, null);
        }
        
        /// <remarks/>
        public void UnBlockGroupUserAsync(string SessionKey, int[] id, object userState) {
            if ((this.UnBlockGroupUserOperationCompleted == null)) {
                this.UnBlockGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnBlockGroupUserOperationCompleted);
            }
            this.InvokeAsync("UnBlockGroupUser", new object[] {
                        SessionKey,
                        id}, this.UnBlockGroupUserOperationCompleted, userState);
        }
        
        private void OnUnBlockGroupUserOperationCompleted(object arg) {
            if ((this.UnBlockGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnBlockGroupUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteGroupUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteGroupUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] id) {
            this.Invoke("DeleteGroupUser", new object[] {
                        SessionKey,
                        id});
        }
        
        /// <remarks/>
        public void DeleteGroupUserAsync(string SessionKey, int[] id) {
            this.DeleteGroupUserAsync(SessionKey, id, null);
        }
        
        /// <remarks/>
        public void DeleteGroupUserAsync(string SessionKey, int[] id, object userState) {
            if ((this.DeleteGroupUserOperationCompleted == null)) {
                this.DeleteGroupUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGroupUserOperationCompleted);
            }
            this.InvokeAsync("DeleteGroupUser", new object[] {
                        SessionKey,
                        id}, this.DeleteGroupUserOperationCompleted, userState);
        }
        
        private void OnDeleteGroupUserOperationCompleted(object arg) {
            if ((this.DeleteGroupUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGroupUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] UserExDTO Data) {
            this.Invoke("UpdateUser", new object[] {
                        SessionKey,
                        Data});
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string SessionKey, UserExDTO Data) {
            this.UpdateUserAsync(SessionKey, Data, null);
        }
        
        /// <remarks/>
        public void UpdateUserAsync(string SessionKey, UserExDTO Data, object userState) {
            if ((this.UpdateUserOperationCompleted == null)) {
                this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
            }
            this.InvokeAsync("UpdateUser", new object[] {
                        SessionKey,
                        Data}, this.UpdateUserOperationCompleted, userState);
        }
        
        private void OnUpdateUserOperationCompleted(object arg) {
            if ((this.UpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/WebUpdateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WebUpdateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] UserExDTO Data, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified, int failCount, [System.Xml.Serialization.XmlIgnoreAttribute()] bool failCountSpecified, bool sentConf, [System.Xml.Serialization.XmlIgnoreAttribute()] bool sentConfSpecified, bool emailConf, [System.Xml.Serialization.XmlIgnoreAttribute()] bool emailConfSpecified) {
            this.Invoke("WebUpdateUser", new object[] {
                        SessionKey,
                        Data,
                        id,
                        idSpecified,
                        failCount,
                        failCountSpecified,
                        sentConf,
                        sentConfSpecified,
                        emailConf,
                        emailConfSpecified});
        }
        
        /// <remarks/>
        public void WebUpdateUserAsync(string SessionKey, UserExDTO Data, int id, bool idSpecified, int failCount, bool failCountSpecified, bool sentConf, bool sentConfSpecified, bool emailConf, bool emailConfSpecified) {
            this.WebUpdateUserAsync(SessionKey, Data, id, idSpecified, failCount, failCountSpecified, sentConf, sentConfSpecified, emailConf, emailConfSpecified, null);
        }
        
        /// <remarks/>
        public void WebUpdateUserAsync(string SessionKey, UserExDTO Data, int id, bool idSpecified, int failCount, bool failCountSpecified, bool sentConf, bool sentConfSpecified, bool emailConf, bool emailConfSpecified, object userState) {
            if ((this.WebUpdateUserOperationCompleted == null)) {
                this.WebUpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebUpdateUserOperationCompleted);
            }
            this.InvokeAsync("WebUpdateUser", new object[] {
                        SessionKey,
                        Data,
                        id,
                        idSpecified,
                        failCount,
                        failCountSpecified,
                        sentConf,
                        sentConfSpecified,
                        emailConf,
                        emailConfSpecified}, this.WebUpdateUserOperationCompleted, userState);
        }
        
        private void OnWebUpdateUserOperationCompleted(object arg) {
            if ((this.WebUpdateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebUpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified) {
            this.Invoke("DeleteUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string SessionKey, int UserId, bool UserIdSpecified) {
            this.DeleteUserAsync(SessionKey, UserId, UserIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string SessionKey, int UserId, bool UserIdSpecified, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateGroupsForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateGroupsForUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] newGroupIdCollecton) {
            this.Invoke("UpdateGroupsForUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified,
                        newGroupIdCollecton});
        }
        
        /// <remarks/>
        public void UpdateGroupsForUserAsync(string SessionKey, int UserId, bool UserIdSpecified, int[] newGroupIdCollecton) {
            this.UpdateGroupsForUserAsync(SessionKey, UserId, UserIdSpecified, newGroupIdCollecton, null);
        }
        
        /// <remarks/>
        public void UpdateGroupsForUserAsync(string SessionKey, int UserId, bool UserIdSpecified, int[] newGroupIdCollecton, object userState) {
            if ((this.UpdateGroupsForUserOperationCompleted == null)) {
                this.UpdateGroupsForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupsForUserOperationCompleted);
            }
            this.InvokeAsync("UpdateGroupsForUser", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified,
                        newGroupIdCollecton}, this.UpdateGroupsForUserOperationCompleted, userState);
        }
        
        private void OnUpdateGroupsForUserOperationCompleted(object arg) {
            if ((this.UpdateGroupsForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupsForUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/SendPasswordOnEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendPasswordOnEmail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified) {
            this.Invoke("SendPasswordOnEmail", new object[] {
                        SessionKey,
                        pass,
                        id,
                        idSpecified});
        }
        
        /// <remarks/>
        public void SendPasswordOnEmailAsync(string SessionKey, string pass, int id, bool idSpecified) {
            this.SendPasswordOnEmailAsync(SessionKey, pass, id, idSpecified, null);
        }
        
        /// <remarks/>
        public void SendPasswordOnEmailAsync(string SessionKey, string pass, int id, bool idSpecified, object userState) {
            if ((this.SendPasswordOnEmailOperationCompleted == null)) {
                this.SendPasswordOnEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendPasswordOnEmailOperationCompleted);
            }
            this.InvokeAsync("SendPasswordOnEmail", new object[] {
                        SessionKey,
                        pass,
                        id,
                        idSpecified}, this.SendPasswordOnEmailOperationCompleted, userState);
        }
        
        private void OnSendPasswordOnEmailOperationCompleted(object arg) {
            if ((this.SendPasswordOnEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendPasswordOnEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/ValidateUserEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ValidateUserEmail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified) {
            this.Invoke("ValidateUserEmail", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified});
        }
        
        /// <remarks/>
        public void ValidateUserEmailAsync(string SessionKey, int UserId, bool UserIdSpecified) {
            this.ValidateUserEmailAsync(SessionKey, UserId, UserIdSpecified, null);
        }
        
        /// <remarks/>
        public void ValidateUserEmailAsync(string SessionKey, int UserId, bool UserIdSpecified, object userState) {
            if ((this.ValidateUserEmailOperationCompleted == null)) {
                this.ValidateUserEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserEmailOperationCompleted);
            }
            this.InvokeAsync("ValidateUserEmail", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified}, this.ValidateUserEmailOperationCompleted, userState);
        }
        
        private void OnValidateUserEmailOperationCompleted(object arg) {
            if ((this.ValidateUserEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/ChangePasswordUsingUserEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ChangePasswordUsingUserEmail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified) {
            this.Invoke("ChangePasswordUsingUserEmail", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified});
        }
        
        /// <remarks/>
        public void ChangePasswordUsingUserEmailAsync(string SessionKey, int UserId, bool UserIdSpecified) {
            this.ChangePasswordUsingUserEmailAsync(SessionKey, UserId, UserIdSpecified, null);
        }
        
        /// <remarks/>
        public void ChangePasswordUsingUserEmailAsync(string SessionKey, int UserId, bool UserIdSpecified, object userState) {
            if ((this.ChangePasswordUsingUserEmailOperationCompleted == null)) {
                this.ChangePasswordUsingUserEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordUsingUserEmailOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordUsingUserEmail", new object[] {
                        SessionKey,
                        UserId,
                        UserIdSpecified}, this.ChangePasswordUsingUserEmailOperationCompleted, userState);
        }
        
        private void OnChangePasswordUsingUserEmailOperationCompleted(object arg) {
            if ((this.ChangePasswordUsingUserEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordUsingUserEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAllGroups", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public GroupDTO[] GetAllGroups([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetAllGroups", new object[] {
                        SessionKey});
            return ((GroupDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string SessionKey) {
            this.GetAllGroupsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string SessionKey, object userState) {
            if ((this.GetAllGroupsOperationCompleted == null)) {
                this.GetAllGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllGroups", new object[] {
                        SessionKey}, this.GetAllGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllGroupsOperationCompleted(object arg) {
            if ((this.GetAllGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllGroupsCompleted(this, new GetAllGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAllUserInGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public UserDTO[] GetAllUserInGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetAllUserInGroup", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((UserDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserInGroupAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetAllUserInGroupAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetAllUserInGroupAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetAllUserInGroupOperationCompleted == null)) {
                this.GetAllUserInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserInGroupOperationCompleted);
            }
            this.InvokeAsync("GetAllUserInGroup", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetAllUserInGroupOperationCompleted, userState);
        }
        
        private void OnGetAllUserInGroupOperationCompleted(object arg) {
            if ((this.GetAllUserInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserInGroupCompleted(this, new GetAllUserInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAllUserOutGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public UserDTO[] GetAllUserOutGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetAllUserOutGroup", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((UserDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserOutGroupAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetAllUserOutGroupAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetAllUserOutGroupAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetAllUserOutGroupOperationCompleted == null)) {
                this.GetAllUserOutGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserOutGroupOperationCompleted);
            }
            this.InvokeAsync("GetAllUserOutGroup", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetAllUserOutGroupOperationCompleted, userState);
        }
        
        private void OnGetAllUserOutGroupOperationCompleted(object arg) {
            if ((this.GetAllUserOutGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserOutGroupCompleted(this, new GetAllUserOutGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetGroupInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public GroupDTO GetGroupInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetGroupInfo", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((GroupDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupInfoAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetGroupInfoAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetGroupInfoAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetGroupInfoOperationCompleted == null)) {
                this.GetGroupInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupInfoOperationCompleted);
            }
            this.InvokeAsync("GetGroupInfo", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetGroupInfoOperationCompleted, userState);
        }
        
        private void OnGetGroupInfoOperationCompleted(object arg) {
            if ((this.GetGroupInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupInfoCompleted(this, new GetGroupInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetContestsInGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] GetContestsInGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int Id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IdSpecified) {
            object[] results = this.Invoke("GetContestsInGroup", new object[] {
                        SessionKey,
                        Id,
                        IdSpecified});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContestsInGroupAsync(string SessionKey, int Id, bool IdSpecified) {
            this.GetContestsInGroupAsync(SessionKey, Id, IdSpecified, null);
        }
        
        /// <remarks/>
        public void GetContestsInGroupAsync(string SessionKey, int Id, bool IdSpecified, object userState) {
            if ((this.GetContestsInGroupOperationCompleted == null)) {
                this.GetContestsInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContestsInGroupOperationCompleted);
            }
            this.InvokeAsync("GetContestsInGroup", new object[] {
                        SessionKey,
                        Id,
                        IdSpecified}, this.GetContestsInGroupOperationCompleted, userState);
        }
        
        private void OnGetContestsInGroupOperationCompleted(object arg) {
            if ((this.GetContestsInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContestsInGroupCompleted(this, new GetContestsInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public GroupDTO CreateGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("CreateGroup", new object[] {
                        SessionKey});
            return ((GroupDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateGroupAsync(string SessionKey) {
            this.CreateGroupAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void CreateGroupAsync(string SessionKey, object userState) {
            if ((this.CreateGroupOperationCompleted == null)) {
                this.CreateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGroupOperationCompleted);
            }
            this.InvokeAsync("CreateGroup", new object[] {
                        SessionKey}, this.CreateGroupOperationCompleted, userState);
        }
        
        private void OnCreateGroupOperationCompleted(object arg) {
            if ((this.CreateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGroupCompleted(this, new CreateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] GroupDTO Group) {
            this.Invoke("UpdateGroup", new object[] {
                        SessionKey,
                        Group});
        }
        
        /// <remarks/>
        public void UpdateGroupAsync(string SessionKey, GroupDTO Group) {
            this.UpdateGroupAsync(SessionKey, Group, null);
        }
        
        /// <remarks/>
        public void UpdateGroupAsync(string SessionKey, GroupDTO Group, object userState) {
            if ((this.UpdateGroupOperationCompleted == null)) {
                this.UpdateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateGroup", new object[] {
                        SessionKey,
                        Group}, this.UpdateGroupOperationCompleted, userState);
        }
        
        private void OnUpdateGroupOperationCompleted(object arg) {
            if ((this.UpdateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/WebUpdateGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WebUpdateGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string GroupTitle, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified) {
            this.Invoke("WebUpdateGroup", new object[] {
                        SessionKey,
                        GroupTitle,
                        id,
                        idSpecified});
        }
        
        /// <remarks/>
        public void WebUpdateGroupAsync(string SessionKey, string GroupTitle, int id, bool idSpecified) {
            this.WebUpdateGroupAsync(SessionKey, GroupTitle, id, idSpecified, null);
        }
        
        /// <remarks/>
        public void WebUpdateGroupAsync(string SessionKey, string GroupTitle, int id, bool idSpecified, object userState) {
            if ((this.WebUpdateGroupOperationCompleted == null)) {
                this.WebUpdateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebUpdateGroupOperationCompleted);
            }
            this.InvokeAsync("WebUpdateGroup", new object[] {
                        SessionKey,
                        GroupTitle,
                        id,
                        idSpecified}, this.WebUpdateGroupOperationCompleted, userState);
        }
        
        private void OnWebUpdateGroupOperationCompleted(object arg) {
            if ((this.WebUpdateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebUpdateGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int GroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool GroupIDSpecified) {
            this.Invoke("DeleteGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified});
        }
        
        /// <remarks/>
        public void DeleteGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified) {
            this.DeleteGroupAsync(SessionKey, GroupID, GroupIDSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified, object userState) {
            if ((this.DeleteGroupOperationCompleted == null)) {
                this.DeleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified}, this.DeleteGroupOperationCompleted, userState);
        }
        
        private void OnDeleteGroupOperationCompleted(object arg) {
            if ((this.DeleteGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/AddInGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public UserDTO AddInGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int GroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool GroupIDSpecified, int UserID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIDSpecified) {
            object[] results = this.Invoke("AddInGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified,
                        UserID,
                        UserIDSpecified});
            return ((UserDTO)(results[0]));
        }
        
        /// <remarks/>
        public void AddInGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified, int UserID, bool UserIDSpecified) {
            this.AddInGroupAsync(SessionKey, GroupID, GroupIDSpecified, UserID, UserIDSpecified, null);
        }
        
        /// <remarks/>
        public void AddInGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified, int UserID, bool UserIDSpecified, object userState) {
            if ((this.AddInGroupOperationCompleted == null)) {
                this.AddInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInGroupOperationCompleted);
            }
            this.InvokeAsync("AddInGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified,
                        UserID,
                        UserIDSpecified}, this.AddInGroupOperationCompleted, userState);
        }
        
        private void OnAddInGroupOperationCompleted(object arg) {
            if ((this.AddInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInGroupCompleted(this, new AddInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteOutFromGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteOutFromGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int GroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool GroupIDSpecified, int UserID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIDSpecified) {
            this.Invoke("DeleteOutFromGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified,
                        UserID,
                        UserIDSpecified});
        }
        
        /// <remarks/>
        public void DeleteOutFromGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified, int UserID, bool UserIDSpecified) {
            this.DeleteOutFromGroupAsync(SessionKey, GroupID, GroupIDSpecified, UserID, UserIDSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteOutFromGroupAsync(string SessionKey, int GroupID, bool GroupIDSpecified, int UserID, bool UserIDSpecified, object userState) {
            if ((this.DeleteOutFromGroupOperationCompleted == null)) {
                this.DeleteOutFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOutFromGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteOutFromGroup", new object[] {
                        SessionKey,
                        GroupID,
                        GroupIDSpecified,
                        UserID,
                        UserIDSpecified}, this.DeleteOutFromGroupOperationCompleted, userState);
        }
        
        private void OnDeleteOutFromGroupOperationCompleted(object arg) {
            if ((this.DeleteOutFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOutFromGroupCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetCompilers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public CompilerDTO[] GetCompilers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetCompilers", new object[] {
                        SessionKey});
            return ((CompilerDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCompilersAsync(string SessionKey) {
            this.GetCompilersAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetCompilersAsync(string SessionKey, object userState) {
            if ((this.GetCompilersOperationCompleted == null)) {
                this.GetCompilersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompilersOperationCompleted);
            }
            this.InvokeAsync("GetCompilers", new object[] {
                        SessionKey}, this.GetCompilersOperationCompleted, userState);
        }
        
        private void OnGetCompilersOperationCompleted(object arg) {
            if ((this.GetCompilersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompilersCompleted(this, new GetCompilersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetCompiler", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompilerDTO GetCompiler([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int CompilerId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CompilerIdSpecified) {
            object[] results = this.Invoke("GetCompiler", new object[] {
                        SessionKey,
                        CompilerId,
                        CompilerIdSpecified});
            return ((CompilerDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompilerAsync(string SessionKey, int CompilerId, bool CompilerIdSpecified) {
            this.GetCompilerAsync(SessionKey, CompilerId, CompilerIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetCompilerAsync(string SessionKey, int CompilerId, bool CompilerIdSpecified, object userState) {
            if ((this.GetCompilerOperationCompleted == null)) {
                this.GetCompilerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompilerOperationCompleted);
            }
            this.InvokeAsync("GetCompiler", new object[] {
                        SessionKey,
                        CompilerId,
                        CompilerIdSpecified}, this.GetCompilerOperationCompleted, userState);
        }
        
        private void OnGetCompilerOperationCompleted(object arg) {
            if ((this.GetCompilerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompilerCompleted(this, new GetCompilerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/InsertOrUpdateCompiler", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertOrUpdateCompiler([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompilerDTO Compiler, out int InsertOrUpdateCompilerResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool InsertOrUpdateCompilerResultSpecified) {
            object[] results = this.Invoke("InsertOrUpdateCompiler", new object[] {
                        SessionKey,
                        Compiler});
            InsertOrUpdateCompilerResult = ((int)(results[0]));
            InsertOrUpdateCompilerResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void InsertOrUpdateCompilerAsync(string SessionKey, CompilerDTO Compiler) {
            this.InsertOrUpdateCompilerAsync(SessionKey, Compiler, null);
        }
        
        /// <remarks/>
        public void InsertOrUpdateCompilerAsync(string SessionKey, CompilerDTO Compiler, object userState) {
            if ((this.InsertOrUpdateCompilerOperationCompleted == null)) {
                this.InsertOrUpdateCompilerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrUpdateCompilerOperationCompleted);
            }
            this.InvokeAsync("InsertOrUpdateCompiler", new object[] {
                        SessionKey,
                        Compiler}, this.InsertOrUpdateCompilerOperationCompleted, userState);
        }
        
        private void OnInsertOrUpdateCompilerOperationCompleted(object arg) {
            if ((this.InsertOrUpdateCompilerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrUpdateCompilerCompleted(this, new InsertOrUpdateCompilerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteCompiler", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCompiler([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int CompilerId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CompilerIdSpecified, out bool DeleteCompilerResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteCompilerResultSpecified) {
            object[] results = this.Invoke("DeleteCompiler", new object[] {
                        SessionKey,
                        CompilerId,
                        CompilerIdSpecified});
            DeleteCompilerResult = ((bool)(results[0]));
            DeleteCompilerResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteCompilerAsync(string SessionKey, int CompilerId, bool CompilerIdSpecified) {
            this.DeleteCompilerAsync(SessionKey, CompilerId, CompilerIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteCompilerAsync(string SessionKey, int CompilerId, bool CompilerIdSpecified, object userState) {
            if ((this.DeleteCompilerOperationCompleted == null)) {
                this.DeleteCompilerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCompilerOperationCompleted);
            }
            this.InvokeAsync("DeleteCompiler", new object[] {
                        SessionKey,
                        CompilerId,
                        CompilerIdSpecified}, this.DeleteCompilerOperationCompleted, userState);
        }
        
        private void OnDeleteCompilerOperationCompleted(object arg) {
            if ((this.DeleteCompilerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompilerCompleted(this, new DeleteCompilerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetSubmits", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public SubmitDTO[] GetSubmits([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> FilterContestId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool FilterContestIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> FilterUserId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool FilterUserIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> FilterTaskId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool FilterTaskIdSpecified, int CountOnPage, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CountOnPageSpecified, int PageNum, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PageNumSpecified) {
            object[] results = this.Invoke("GetSubmits", new object[] {
                        SessionKey,
                        FilterContestId,
                        FilterContestIdSpecified,
                        FilterUserId,
                        FilterUserIdSpecified,
                        FilterTaskId,
                        FilterTaskIdSpecified,
                        CountOnPage,
                        CountOnPageSpecified,
                        PageNum,
                        PageNumSpecified});
            return ((SubmitDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubmitsAsync(string SessionKey, System.Nullable<int> FilterContestId, bool FilterContestIdSpecified, System.Nullable<int> FilterUserId, bool FilterUserIdSpecified, System.Nullable<int> FilterTaskId, bool FilterTaskIdSpecified, int CountOnPage, bool CountOnPageSpecified, int PageNum, bool PageNumSpecified) {
            this.GetSubmitsAsync(SessionKey, FilterContestId, FilterContestIdSpecified, FilterUserId, FilterUserIdSpecified, FilterTaskId, FilterTaskIdSpecified, CountOnPage, CountOnPageSpecified, PageNum, PageNumSpecified, null);
        }
        
        /// <remarks/>
        public void GetSubmitsAsync(string SessionKey, System.Nullable<int> FilterContestId, bool FilterContestIdSpecified, System.Nullable<int> FilterUserId, bool FilterUserIdSpecified, System.Nullable<int> FilterTaskId, bool FilterTaskIdSpecified, int CountOnPage, bool CountOnPageSpecified, int PageNum, bool PageNumSpecified, object userState) {
            if ((this.GetSubmitsOperationCompleted == null)) {
                this.GetSubmitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubmitsOperationCompleted);
            }
            this.InvokeAsync("GetSubmits", new object[] {
                        SessionKey,
                        FilterContestId,
                        FilterContestIdSpecified,
                        FilterUserId,
                        FilterUserIdSpecified,
                        FilterTaskId,
                        FilterTaskIdSpecified,
                        CountOnPage,
                        CountOnPageSpecified,
                        PageNum,
                        PageNumSpecified}, this.GetSubmitsOperationCompleted, userState);
        }
        
        private void OnGetSubmitsOperationCompleted(object arg) {
            if ((this.GetSubmitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubmitsCompleted(this, new GetSubmitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/WebGetSubmits", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public SubmitDTO[] WebGetSubmits([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("WebGetSubmits", new object[] {
                        SessionKey});
            return ((SubmitDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void WebGetSubmitsAsync(string SessionKey) {
            this.WebGetSubmitsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void WebGetSubmitsAsync(string SessionKey, object userState) {
            if ((this.WebGetSubmitsOperationCompleted == null)) {
                this.WebGetSubmitsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebGetSubmitsOperationCompleted);
            }
            this.InvokeAsync("WebGetSubmits", new object[] {
                        SessionKey}, this.WebGetSubmitsOperationCompleted, userState);
        }
        
        private void OnWebGetSubmitsOperationCompleted(object arg) {
            if ((this.WebGetSubmitsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebGetSubmitsCompleted(this, new WebGetSubmitsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetSubmitUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public SubmitDTO[] GetSubmitUpdate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] SubmitIdCollection) {
            object[] results = this.Invoke("GetSubmitUpdate", new object[] {
                        SessionKey,
                        SubmitIdCollection});
            return ((SubmitDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubmitUpdateAsync(string SessionKey, int[] SubmitIdCollection) {
            this.GetSubmitUpdateAsync(SessionKey, SubmitIdCollection, null);
        }
        
        /// <remarks/>
        public void GetSubmitUpdateAsync(string SessionKey, int[] SubmitIdCollection, object userState) {
            if ((this.GetSubmitUpdateOperationCompleted == null)) {
                this.GetSubmitUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubmitUpdateOperationCompleted);
            }
            this.InvokeAsync("GetSubmitUpdate", new object[] {
                        SessionKey,
                        SubmitIdCollection}, this.GetSubmitUpdateOperationCompleted, userState);
        }
        
        private void OnGetSubmitUpdateOperationCompleted(object arg) {
            if ((this.GetSubmitUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubmitUpdateCompleted(this, new GetSubmitUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/SubmitShowCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubmitShowCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int SubmitId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubmitIdSpecified) {
            object[] results = this.Invoke("SubmitShowCode", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitShowCodeAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified) {
            this.SubmitShowCodeAsync(SessionKey, SubmitId, SubmitIdSpecified, null);
        }
        
        /// <remarks/>
        public void SubmitShowCodeAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified, object userState) {
            if ((this.SubmitShowCodeOperationCompleted == null)) {
                this.SubmitShowCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitShowCodeOperationCompleted);
            }
            this.InvokeAsync("SubmitShowCode", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified}, this.SubmitShowCodeOperationCompleted, userState);
        }
        
        private void OnSubmitShowCodeOperationCompleted(object arg) {
            if ((this.SubmitShowCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitShowCodeCompleted(this, new SubmitShowCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/SubmitShowAdminLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubmitShowAdminLog([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int SubmitId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubmitIdSpecified) {
            object[] results = this.Invoke("SubmitShowAdminLog", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitShowAdminLogAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified) {
            this.SubmitShowAdminLogAsync(SessionKey, SubmitId, SubmitIdSpecified, null);
        }
        
        /// <remarks/>
        public void SubmitShowAdminLogAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified, object userState) {
            if ((this.SubmitShowAdminLogOperationCompleted == null)) {
                this.SubmitShowAdminLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitShowAdminLogOperationCompleted);
            }
            this.InvokeAsync("SubmitShowAdminLog", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified}, this.SubmitShowAdminLogOperationCompleted, userState);
        }
        
        private void OnSubmitShowAdminLogOperationCompleted(object arg) {
            if ((this.SubmitShowAdminLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitShowAdminLogCompleted(this, new SubmitShowAdminLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/SubmitShowUserLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SubmitShowUserLog([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int SubmitId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubmitIdSpecified) {
            object[] results = this.Invoke("SubmitShowUserLog", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitShowUserLogAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified) {
            this.SubmitShowUserLogAsync(SessionKey, SubmitId, SubmitIdSpecified, null);
        }
        
        /// <remarks/>
        public void SubmitShowUserLogAsync(string SessionKey, int SubmitId, bool SubmitIdSpecified, object userState) {
            if ((this.SubmitShowUserLogOperationCompleted == null)) {
                this.SubmitShowUserLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitShowUserLogOperationCompleted);
            }
            this.InvokeAsync("SubmitShowUserLog", new object[] {
                        SessionKey,
                        SubmitId,
                        SubmitIdSpecified}, this.SubmitShowUserLogOperationCompleted, userState);
        }
        
        private void OnSubmitShowUserLogOperationCompleted(object arg) {
            if ((this.SubmitShowUserLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitShowUserLogCompleted(this, new SubmitShowUserLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/RejudgeSubmit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RejudgeSubmit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] SubmitIdCollection, out bool RejudgeSubmitResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool RejudgeSubmitResultSpecified) {
            object[] results = this.Invoke("RejudgeSubmit", new object[] {
                        SessionKey,
                        SubmitIdCollection});
            RejudgeSubmitResult = ((bool)(results[0]));
            RejudgeSubmitResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void RejudgeSubmitAsync(string SessionKey, int[] SubmitIdCollection) {
            this.RejudgeSubmitAsync(SessionKey, SubmitIdCollection, null);
        }
        
        /// <remarks/>
        public void RejudgeSubmitAsync(string SessionKey, int[] SubmitIdCollection, object userState) {
            if ((this.RejudgeSubmitOperationCompleted == null)) {
                this.RejudgeSubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejudgeSubmitOperationCompleted);
            }
            this.InvokeAsync("RejudgeSubmit", new object[] {
                        SessionKey,
                        SubmitIdCollection}, this.RejudgeSubmitOperationCompleted, userState);
        }
        
        private void OnRejudgeSubmitOperationCompleted(object arg) {
            if ((this.RejudgeSubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejudgeSubmitCompleted(this, new RejudgeSubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteSubmit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubmit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] SubmitIdCollection, out bool DeleteSubmitResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool DeleteSubmitResultSpecified) {
            object[] results = this.Invoke("DeleteSubmit", new object[] {
                        SessionKey,
                        SubmitIdCollection});
            DeleteSubmitResult = ((bool)(results[0]));
            DeleteSubmitResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void DeleteSubmitAsync(string SessionKey, int[] SubmitIdCollection) {
            this.DeleteSubmitAsync(SessionKey, SubmitIdCollection, null);
        }
        
        /// <remarks/>
        public void DeleteSubmitAsync(string SessionKey, int[] SubmitIdCollection, object userState) {
            if ((this.DeleteSubmitOperationCompleted == null)) {
                this.DeleteSubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubmitOperationCompleted);
            }
            this.InvokeAsync("DeleteSubmit", new object[] {
                        SessionKey,
                        SubmitIdCollection}, this.DeleteSubmitOperationCompleted, userState);
        }
        
        private void OnDeleteSubmitOperationCompleted(object arg) {
            if ((this.DeleteSubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubmitCompleted(this, new DeleteSubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public TaskDTO[] GetTasks([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetTasks", new object[] {
                        SessionKey});
            return ((TaskDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksAsync(string SessionKey) {
            this.GetTasksAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetTasksAsync(string SessionKey, object userState) {
            if ((this.GetTasksOperationCompleted == null)) {
                this.GetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksOperationCompleted);
            }
            this.InvokeAsync("GetTasks", new object[] {
                        SessionKey}, this.GetTasksOperationCompleted, userState);
        }
        
        private void OnGetTasksOperationCompleted(object arg) {
            if ((this.GetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TaskExDTO GetTask([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified, bool IncludeStatement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IncludeStatementSpecified) {
            object[] results = this.Invoke("GetTask", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        IncludeStatement,
                        IncludeStatementSpecified});
            return ((TaskExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskAsync(string SessionKey, int TaskId, bool TaskIdSpecified, bool IncludeStatement, bool IncludeStatementSpecified) {
            this.GetTaskAsync(SessionKey, TaskId, TaskIdSpecified, IncludeStatement, IncludeStatementSpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskAsync(string SessionKey, int TaskId, bool TaskIdSpecified, bool IncludeStatement, bool IncludeStatementSpecified, object userState) {
            if ((this.GetTaskOperationCompleted == null)) {
                this.GetTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskOperationCompleted);
            }
            this.InvokeAsync("GetTask", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        IncludeStatement,
                        IncludeStatementSpecified}, this.GetTaskOperationCompleted, userState);
        }
        
        private void OnGetTaskOperationCompleted(object arg) {
            if ((this.GetTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskCompleted(this, new GetTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTasksComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public TaskComlexity[] GetTasksComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetTasksComlexity", new object[] {
                        SessionKey});
            return ((TaskComlexity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksComlexityAsync(string SessionKey) {
            this.GetTasksComlexityAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetTasksComlexityAsync(string SessionKey, object userState) {
            if ((this.GetTasksComlexityOperationCompleted == null)) {
                this.GetTasksComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksComlexityOperationCompleted);
            }
            this.InvokeAsync("GetTasksComlexity", new object[] {
                        SessionKey}, this.GetTasksComlexityOperationCompleted, userState);
        }
        
        private void OnGetTasksComlexityOperationCompleted(object arg) {
            if ((this.GetTasksComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksComlexityCompleted(this, new GetTasksComlexityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTasksSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public TaskComlexity[] GetTasksSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetTasksSubject", new object[] {
                        SessionKey});
            return ((TaskComlexity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksSubjectAsync(string SessionKey) {
            this.GetTasksSubjectAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetTasksSubjectAsync(string SessionKey, object userState) {
            if ((this.GetTasksSubjectOperationCompleted == null)) {
                this.GetTasksSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksSubjectOperationCompleted);
            }
            this.InvokeAsync("GetTasksSubject", new object[] {
                        SessionKey}, this.GetTasksSubjectOperationCompleted, userState);
        }
        
        private void OnGetTasksSubjectOperationCompleted(object arg) {
            if ((this.GetTasksSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksSubjectCompleted(this, new GetTasksSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTaskStatement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetTaskStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            object[] results = this.Invoke("GetTaskStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.GetTaskStatementAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetTaskStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.GetTaskStatementOperationCompleted == null)) {
                this.GetTaskStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskStatementOperationCompleted);
            }
            this.InvokeAsync("GetTaskStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.GetTaskStatementOperationCompleted, userState);
        }
        
        private void OnGetTaskStatementOperationCompleted(object arg) {
            if ((this.GetTaskStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskStatementCompleted(this, new GetTaskStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TaskExDTO CreateTask([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("CreateTask", new object[] {
                        SessionKey});
            return ((TaskExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTaskAsync(string SessionKey) {
            this.CreateTaskAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void CreateTaskAsync(string SessionKey, object userState) {
            if ((this.CreateTaskOperationCompleted == null)) {
                this.CreateTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTaskOperationCompleted);
            }
            this.InvokeAsync("CreateTask", new object[] {
                        SessionKey}, this.CreateTaskOperationCompleted, userState);
        }
        
        private void OnCreateTaskOperationCompleted(object arg) {
            if ((this.CreateTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTaskCompleted(this, new CreateTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified, out int GetSubjectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetSubjectResultSpecified) {
            object[] results = this.Invoke("GetSubject", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            GetSubjectResult = ((int)(results[0]));
            GetSubjectResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetSubjectAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetSubjectAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetSubjectAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetSubjectOperationCompleted == null)) {
                this.GetSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubjectOperationCompleted);
            }
            this.InvokeAsync("GetSubject", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetSubjectOperationCompleted, userState);
        }
        
        private void OnGetSubjectOperationCompleted(object arg) {
            if ((this.GetSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubjectCompleted(this, new GetSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTaskStatement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTaskStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Statement) {
            this.Invoke("UpdateTaskStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        Statement});
        }
        
        /// <remarks/>
        public void UpdateTaskStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, string Statement) {
            this.UpdateTaskStatementAsync(SessionKey, TaskId, TaskIdSpecified, Statement, null);
        }
        
        /// <remarks/>
        public void UpdateTaskStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, string Statement, object userState) {
            if ((this.UpdateTaskStatementOperationCompleted == null)) {
                this.UpdateTaskStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskStatementOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        Statement}, this.UpdateTaskStatementOperationCompleted, userState);
        }
        
        private void OnUpdateTaskStatementOperationCompleted(object arg) {
            if ((this.UpdateTaskStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskStatementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateSubjectComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSubjectComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int IDTask, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDTaskSpecified, int subject, [System.Xml.Serialization.XmlIgnoreAttribute()] bool subjectSpecified, int Comlexity, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ComlexitySpecified) {
            this.Invoke("UpdateSubjectComlexity", new object[] {
                        SessionKey,
                        IDTask,
                        IDTaskSpecified,
                        subject,
                        subjectSpecified,
                        Comlexity,
                        ComlexitySpecified});
        }
        
        /// <remarks/>
        public void UpdateSubjectComlexityAsync(string SessionKey, int IDTask, bool IDTaskSpecified, int subject, bool subjectSpecified, int Comlexity, bool ComlexitySpecified) {
            this.UpdateSubjectComlexityAsync(SessionKey, IDTask, IDTaskSpecified, subject, subjectSpecified, Comlexity, ComlexitySpecified, null);
        }
        
        /// <remarks/>
        public void UpdateSubjectComlexityAsync(string SessionKey, int IDTask, bool IDTaskSpecified, int subject, bool subjectSpecified, int Comlexity, bool ComlexitySpecified, object userState) {
            if ((this.UpdateSubjectComlexityOperationCompleted == null)) {
                this.UpdateSubjectComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubjectComlexityOperationCompleted);
            }
            this.InvokeAsync("UpdateSubjectComlexity", new object[] {
                        SessionKey,
                        IDTask,
                        IDTaskSpecified,
                        subject,
                        subjectSpecified,
                        Comlexity,
                        ComlexitySpecified}, this.UpdateSubjectComlexityOperationCompleted, userState);
        }
        
        private void OnUpdateSubjectComlexityOperationCompleted(object arg) {
            if ((this.UpdateSubjectComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubjectComlexityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTaskPdfStatement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTaskPdfStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] Statement) {
            this.Invoke("UpdateTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        Statement});
        }
        
        /// <remarks/>
        public void UpdateTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, byte[] Statement) {
            this.UpdateTaskPdfStatementAsync(SessionKey, TaskId, TaskIdSpecified, Statement, null);
        }
        
        /// <remarks/>
        public void UpdateTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, byte[] Statement, object userState) {
            if ((this.UpdateTaskPdfStatementOperationCompleted == null)) {
                this.UpdateTaskPdfStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskPdfStatementOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified,
                        Statement}, this.UpdateTaskPdfStatementOperationCompleted, userState);
        }
        
        private void OnUpdateTaskPdfStatementOperationCompleted(object arg) {
            if ((this.UpdateTaskPdfStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskPdfStatementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteTaskPdfStatement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTaskPdfStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            this.Invoke("DeleteTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.DeleteTaskPdfStatementAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.DeleteTaskPdfStatementOperationCompleted == null)) {
                this.DeleteTaskPdfStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskPdfStatementOperationCompleted);
            }
            this.InvokeAsync("DeleteTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.DeleteTaskPdfStatementOperationCompleted, userState);
        }
        
        private void OnDeleteTaskPdfStatementOperationCompleted(object arg) {
            if ((this.DeleteTaskPdfStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskPdfStatementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DownloadTaskPdfStatement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] DownloadTaskPdfStatement([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            object[] results = this.Invoke("DownloadTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.DownloadTaskPdfStatementAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void DownloadTaskPdfStatementAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.DownloadTaskPdfStatementOperationCompleted == null)) {
                this.DownloadTaskPdfStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTaskPdfStatementOperationCompleted);
            }
            this.InvokeAsync("DownloadTaskPdfStatement", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.DownloadTaskPdfStatementOperationCompleted, userState);
        }
        
        private void OnDownloadTaskPdfStatementOperationCompleted(object arg) {
            if ((this.DownloadTaskPdfStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTaskPdfStatementCompleted(this, new DownloadTaskPdfStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTask([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] TaskExDTO Task, bool UpdateStatement, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UpdateStatementSpecified) {
            this.Invoke("UpdateTask", new object[] {
                        SessionKey,
                        Task,
                        UpdateStatement,
                        UpdateStatementSpecified});
        }
        
        /// <remarks/>
        public void UpdateTaskAsync(string SessionKey, TaskExDTO Task, bool UpdateStatement, bool UpdateStatementSpecified) {
            this.UpdateTaskAsync(SessionKey, Task, UpdateStatement, UpdateStatementSpecified, null);
        }
        
        /// <remarks/>
        public void UpdateTaskAsync(string SessionKey, TaskExDTO Task, bool UpdateStatement, bool UpdateStatementSpecified, object userState) {
            if ((this.UpdateTaskOperationCompleted == null)) {
                this.UpdateTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskOperationCompleted);
            }
            this.InvokeAsync("UpdateTask", new object[] {
                        SessionKey,
                        Task,
                        UpdateStatement,
                        UpdateStatementSpecified}, this.UpdateTaskOperationCompleted, userState);
        }
        
        private void OnUpdateTaskOperationCompleted(object arg) {
            if ((this.UpdateTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTask([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            this.Invoke("DeleteTask", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.DeleteTaskAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.DeleteTaskOperationCompleted == null)) {
                this.DeleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskOperationCompleted);
            }
            this.InvokeAsync("DeleteTask", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.DeleteTaskOperationCompleted, userState);
        }
        
        private void OnDeleteTaskOperationCompleted(object arg) {
            if ((this.DeleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTaskEx", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTaskEx([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] TaskExDTO Task, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")] TestDTO[] Tests, bool AppendTests, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AppendTestsSpecified, [System.Xml.Serialization.XmlElementAttribute("UpdateTaskStatement")] bool UpdateTaskStatement1, [System.Xml.Serialization.XmlElementAttribute("UpdateTaskStatement")] [System.Xml.Serialization.XmlIgnoreAttribute()] bool UpdateTaskStatement1Specified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")] CheckerDTO[] Checkers, bool AppendCheckers, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AppendCheckersSpecified) {
            this.Invoke("UpdateTaskEx", new object[] {
                        SessionKey,
                        Task,
                        Tests,
                        AppendTests,
                        AppendTestsSpecified,
                        UpdateTaskStatement1,
                        UpdateTaskStatement1Specified,
                        Checkers,
                        AppendCheckers,
                        AppendCheckersSpecified});
        }
        
        /// <remarks/>
        public void UpdateTaskExAsync(string SessionKey, TaskExDTO Task, TestDTO[] Tests, bool AppendTests, bool AppendTestsSpecified, bool UpdateTaskStatement1, bool UpdateTaskStatement1Specified, CheckerDTO[] Checkers, bool AppendCheckers, bool AppendCheckersSpecified) {
            this.UpdateTaskExAsync(SessionKey, Task, Tests, AppendTests, AppendTestsSpecified, UpdateTaskStatement1, UpdateTaskStatement1Specified, Checkers, AppendCheckers, AppendCheckersSpecified, null);
        }
        
        /// <remarks/>
        public void UpdateTaskExAsync(string SessionKey, TaskExDTO Task, TestDTO[] Tests, bool AppendTests, bool AppendTestsSpecified, bool UpdateTaskStatement1, bool UpdateTaskStatement1Specified, CheckerDTO[] Checkers, bool AppendCheckers, bool AppendCheckersSpecified, object userState) {
            if ((this.UpdateTaskExOperationCompleted == null)) {
                this.UpdateTaskExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTaskExOperationCompleted);
            }
            this.InvokeAsync("UpdateTaskEx", new object[] {
                        SessionKey,
                        Task,
                        Tests,
                        AppendTests,
                        AppendTestsSpecified,
                        UpdateTaskStatement1,
                        UpdateTaskStatement1Specified,
                        Checkers,
                        AppendCheckers,
                        AppendCheckersSpecified}, this.UpdateTaskExOperationCompleted, userState);
        }
        
        private void OnUpdateTaskExOperationCompleted(object arg) {
            if ((this.UpdateTaskExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTaskExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/AddNewSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title) {
            this.Invoke("AddNewSubject", new object[] {
                        SessionKey,
                        title});
        }
        
        /// <remarks/>
        public void AddNewSubjectAsync(string SessionKey, string title) {
            this.AddNewSubjectAsync(SessionKey, title, null);
        }
        
        /// <remarks/>
        public void AddNewSubjectAsync(string SessionKey, string title, object userState) {
            if ((this.AddNewSubjectOperationCompleted == null)) {
                this.AddNewSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewSubjectOperationCompleted);
            }
            this.InvokeAsync("AddNewSubject", new object[] {
                        SessionKey,
                        title}, this.AddNewSubjectOperationCompleted, userState);
        }
        
        private void OnAddNewSubjectOperationCompleted(object arg) {
            if ((this.AddNewSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewSubjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/AddNewComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title) {
            this.Invoke("AddNewComlexity", new object[] {
                        SessionKey,
                        title});
        }
        
        /// <remarks/>
        public void AddNewComlexityAsync(string SessionKey, string title) {
            this.AddNewComlexityAsync(SessionKey, title, null);
        }
        
        /// <remarks/>
        public void AddNewComlexityAsync(string SessionKey, string title, object userState) {
            if ((this.AddNewComlexityOperationCompleted == null)) {
                this.AddNewComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewComlexityOperationCompleted);
            }
            this.InvokeAsync("AddNewComlexity", new object[] {
                        SessionKey,
                        title}, this.AddNewComlexityOperationCompleted, userState);
        }
        
        private void OnAddNewComlexityOperationCompleted(object arg) {
            if ((this.AddNewComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewComlexityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int IDS, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSSpecified) {
            this.Invoke("DeleteSubject", new object[] {
                        SessionKey,
                        IDS,
                        IDSSpecified});
        }
        
        /// <remarks/>
        public void DeleteSubjectAsync(string SessionKey, int IDS, bool IDSSpecified) {
            this.DeleteSubjectAsync(SessionKey, IDS, IDSSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteSubjectAsync(string SessionKey, int IDS, bool IDSSpecified, object userState) {
            if ((this.DeleteSubjectOperationCompleted == null)) {
                this.DeleteSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSubjectOperationCompleted);
            }
            this.InvokeAsync("DeleteSubject", new object[] {
                        SessionKey,
                        IDS,
                        IDSSpecified}, this.DeleteSubjectOperationCompleted, userState);
        }
        
        private void OnDeleteSubjectOperationCompleted(object arg) {
            if ((this.DeleteSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSubjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int IDD, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDDSpecified) {
            this.Invoke("DeleteComlexity", new object[] {
                        SessionKey,
                        IDD,
                        IDDSpecified});
        }
        
        /// <remarks/>
        public void DeleteComlexityAsync(string SessionKey, int IDD, bool IDDSpecified) {
            this.DeleteComlexityAsync(SessionKey, IDD, IDDSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteComlexityAsync(string SessionKey, int IDD, bool IDDSpecified, object userState) {
            if ((this.DeleteComlexityOperationCompleted == null)) {
                this.DeleteComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteComlexityOperationCompleted);
            }
            this.InvokeAsync("DeleteComlexity", new object[] {
                        SessionKey,
                        IDD,
                        IDDSpecified}, this.DeleteComlexityOperationCompleted, userState);
        }
        
        private void OnDeleteComlexityOperationCompleted(object arg) {
            if ((this.DeleteComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteComlexityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateNewSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNewSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int IDS, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title) {
            this.Invoke("UpdateNewSubject", new object[] {
                        SessionKey,
                        IDS,
                        IDSSpecified,
                        title});
        }
        
        /// <remarks/>
        public void UpdateNewSubjectAsync(string SessionKey, int IDS, bool IDSSpecified, string title) {
            this.UpdateNewSubjectAsync(SessionKey, IDS, IDSSpecified, title, null);
        }
        
        /// <remarks/>
        public void UpdateNewSubjectAsync(string SessionKey, int IDS, bool IDSSpecified, string title, object userState) {
            if ((this.UpdateNewSubjectOperationCompleted == null)) {
                this.UpdateNewSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNewSubjectOperationCompleted);
            }
            this.InvokeAsync("UpdateNewSubject", new object[] {
                        SessionKey,
                        IDS,
                        IDSSpecified,
                        title}, this.UpdateNewSubjectOperationCompleted, userState);
        }
        
        private void OnUpdateNewSubjectOperationCompleted(object arg) {
            if ((this.UpdateNewSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNewSubjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateNewComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNewComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int IDD, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title) {
            this.Invoke("UpdateNewComlexity", new object[] {
                        SessionKey,
                        IDD,
                        IDDSpecified,
                        title});
        }
        
        /// <remarks/>
        public void UpdateNewComlexityAsync(string SessionKey, int IDD, bool IDDSpecified, string title) {
            this.UpdateNewComlexityAsync(SessionKey, IDD, IDDSpecified, title, null);
        }
        
        /// <remarks/>
        public void UpdateNewComlexityAsync(string SessionKey, int IDD, bool IDDSpecified, string title, object userState) {
            if ((this.UpdateNewComlexityOperationCompleted == null)) {
                this.UpdateNewComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNewComlexityOperationCompleted);
            }
            this.InvokeAsync("UpdateNewComlexity", new object[] {
                        SessionKey,
                        IDD,
                        IDDSpecified,
                        title}, this.UpdateNewComlexityOperationCompleted, userState);
        }
        
        private void OnUpdateNewComlexityOperationCompleted(object arg) {
            if ((this.UpdateNewComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNewComlexityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetIDSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetIDSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title, out int GetIDSubjectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetIDSubjectResultSpecified) {
            object[] results = this.Invoke("GetIDSubject", new object[] {
                        SessionKey,
                        title});
            GetIDSubjectResult = ((int)(results[0]));
            GetIDSubjectResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetIDSubjectAsync(string SessionKey, string title) {
            this.GetIDSubjectAsync(SessionKey, title, null);
        }
        
        /// <remarks/>
        public void GetIDSubjectAsync(string SessionKey, string title, object userState) {
            if ((this.GetIDSubjectOperationCompleted == null)) {
                this.GetIDSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDSubjectOperationCompleted);
            }
            this.InvokeAsync("GetIDSubject", new object[] {
                        SessionKey,
                        title}, this.GetIDSubjectOperationCompleted, userState);
        }
        
        private void OnGetIDSubjectOperationCompleted(object arg) {
            if ((this.GetIDSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDSubjectCompleted(this, new GetIDSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetIDComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetIDComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string title, out int GetIDComlexityResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool GetIDComlexityResultSpecified) {
            object[] results = this.Invoke("GetIDComlexity", new object[] {
                        SessionKey,
                        title});
            GetIDComlexityResult = ((int)(results[0]));
            GetIDComlexityResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void GetIDComlexityAsync(string SessionKey, string title) {
            this.GetIDComlexityAsync(SessionKey, title, null);
        }
        
        /// <remarks/>
        public void GetIDComlexityAsync(string SessionKey, string title, object userState) {
            if ((this.GetIDComlexityOperationCompleted == null)) {
                this.GetIDComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDComlexityOperationCompleted);
            }
            this.InvokeAsync("GetIDComlexity", new object[] {
                        SessionKey,
                        title}, this.GetIDComlexityOperationCompleted, userState);
        }
        
        private void OnGetIDComlexityOperationCompleted(object arg) {
            if ((this.GetIDComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDComlexityCompleted(this, new GetIDComlexityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTitleSubject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetTitleSubject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetTitleSubject", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleSubjectAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetTitleSubjectAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetTitleSubjectAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetTitleSubjectOperationCompleted == null)) {
                this.GetTitleSubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleSubjectOperationCompleted);
            }
            this.InvokeAsync("GetTitleSubject", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetTitleSubjectOperationCompleted, userState);
        }
        
        private void OnGetTitleSubjectOperationCompleted(object arg) {
            if ((this.GetTitleSubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleSubjectCompleted(this, new GetTitleSubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTitleComlexity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetTitleComlexity([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetTitleComlexity", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTitleComlexityAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetTitleComlexityAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetTitleComlexityAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetTitleComlexityOperationCompleted == null)) {
                this.GetTitleComlexityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTitleComlexityOperationCompleted);
            }
            this.InvokeAsync("GetTitleComlexity", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetTitleComlexityOperationCompleted, userState);
        }
        
        private void OnGetTitleComlexityOperationCompleted(object arg) {
            if ((this.GetTitleComlexityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTitleComlexityCompleted(this, new GetTitleComlexityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TestDTO GetTest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TestIdSpecified) {
            object[] results = this.Invoke("GetTest", new object[] {
                        SessionKey,
                        TestId,
                        TestIdSpecified});
            return ((TestDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestAsync(string SessionKey, int TestId, bool TestIdSpecified) {
            this.GetTestAsync(SessionKey, TestId, TestIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetTestAsync(string SessionKey, int TestId, bool TestIdSpecified, object userState) {
            if ((this.GetTestOperationCompleted == null)) {
                this.GetTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestOperationCompleted);
            }
            this.InvokeAsync("GetTest", new object[] {
                        SessionKey,
                        TestId,
                        TestIdSpecified}, this.GetTestOperationCompleted, userState);
        }
        
        private void OnGetTestOperationCompleted(object arg) {
            if ((this.GetTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestCompleted(this, new GetTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public TestDTO CreateTest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            object[] results = this.Invoke("CreateTest", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
            return ((TestDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTestAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.CreateTestAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void CreateTestAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.CreateTestOperationCompleted == null)) {
                this.CreateTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTestOperationCompleted);
            }
            this.InvokeAsync("CreateTest", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.CreateTestOperationCompleted, userState);
        }
        
        private void OnCreateTestOperationCompleted(object arg) {
            if ((this.CreateTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTestCompleted(this, new CreateTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] TestDTO Test) {
            this.Invoke("UpdateTest", new object[] {
                        SessionKey,
                        Test});
        }
        
        /// <remarks/>
        public void UpdateTestAsync(string SessionKey, TestDTO Test) {
            this.UpdateTestAsync(SessionKey, Test, null);
        }
        
        /// <remarks/>
        public void UpdateTestAsync(string SessionKey, TestDTO Test, object userState) {
            if ((this.UpdateTestOperationCompleted == null)) {
                this.UpdateTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTestOperationCompleted);
            }
            this.InvokeAsync("UpdateTest", new object[] {
                        SessionKey,
                        Test}, this.UpdateTestOperationCompleted, userState);
        }
        
        private void OnUpdateTestOperationCompleted(object arg) {
            if ((this.UpdateTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TestIdSpecified) {
            this.Invoke("DeleteTest", new object[] {
                        SessionKey,
                        TestId,
                        TestIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteTestAsync(string SessionKey, int TestId, bool TestIdSpecified) {
            this.DeleteTestAsync(SessionKey, TestId, TestIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteTestAsync(string SessionKey, int TestId, bool TestIdSpecified, object userState) {
            if ((this.DeleteTestOperationCompleted == null)) {
                this.DeleteTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTestOperationCompleted);
            }
            this.InvokeAsync("DeleteTest", new object[] {
                        SessionKey,
                        TestId,
                        TestIdSpecified}, this.DeleteTestOperationCompleted, userState);
        }
        
        private void OnDeleteTestOperationCompleted(object arg) {
            if ((this.DeleteTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetChecker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CheckerDTO GetChecker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int CheckerId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CheckerIdSpecified) {
            object[] results = this.Invoke("GetChecker", new object[] {
                        SessionKey,
                        CheckerId,
                        CheckerIdSpecified});
            return ((CheckerDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckerAsync(string SessionKey, int CheckerId, bool CheckerIdSpecified) {
            this.GetCheckerAsync(SessionKey, CheckerId, CheckerIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetCheckerAsync(string SessionKey, int CheckerId, bool CheckerIdSpecified, object userState) {
            if ((this.GetCheckerOperationCompleted == null)) {
                this.GetCheckerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckerOperationCompleted);
            }
            this.InvokeAsync("GetChecker", new object[] {
                        SessionKey,
                        CheckerId,
                        CheckerIdSpecified}, this.GetCheckerOperationCompleted, userState);
        }
        
        private void OnGetCheckerOperationCompleted(object arg) {
            if ((this.GetCheckerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckerCompleted(this, new GetCheckerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateChecker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CheckerDTO CreateChecker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int TaskId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TaskIdSpecified) {
            object[] results = this.Invoke("CreateChecker", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified});
            return ((CheckerDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateCheckerAsync(string SessionKey, int TaskId, bool TaskIdSpecified) {
            this.CreateCheckerAsync(SessionKey, TaskId, TaskIdSpecified, null);
        }
        
        /// <remarks/>
        public void CreateCheckerAsync(string SessionKey, int TaskId, bool TaskIdSpecified, object userState) {
            if ((this.CreateCheckerOperationCompleted == null)) {
                this.CreateCheckerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateCheckerOperationCompleted);
            }
            this.InvokeAsync("CreateChecker", new object[] {
                        SessionKey,
                        TaskId,
                        TaskIdSpecified}, this.CreateCheckerOperationCompleted, userState);
        }
        
        private void OnCreateCheckerOperationCompleted(object arg) {
            if ((this.CreateCheckerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCheckerCompleted(this, new CreateCheckerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateChecker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateChecker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CheckerDTO Checker) {
            this.Invoke("UpdateChecker", new object[] {
                        SessionKey,
                        Checker});
        }
        
        /// <remarks/>
        public void UpdateCheckerAsync(string SessionKey, CheckerDTO Checker) {
            this.UpdateCheckerAsync(SessionKey, Checker, null);
        }
        
        /// <remarks/>
        public void UpdateCheckerAsync(string SessionKey, CheckerDTO Checker, object userState) {
            if ((this.UpdateCheckerOperationCompleted == null)) {
                this.UpdateCheckerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCheckerOperationCompleted);
            }
            this.InvokeAsync("UpdateChecker", new object[] {
                        SessionKey,
                        Checker}, this.UpdateCheckerOperationCompleted, userState);
        }
        
        private void OnUpdateCheckerOperationCompleted(object arg) {
            if ((this.UpdateCheckerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCheckerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteChecker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteChecker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int CheckerId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool CheckerIdSpecified) {
            this.Invoke("DeleteChecker", new object[] {
                        SessionKey,
                        CheckerId,
                        CheckerIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteCheckerAsync(string SessionKey, int CheckerId, bool CheckerIdSpecified) {
            this.DeleteCheckerAsync(SessionKey, CheckerId, CheckerIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteCheckerAsync(string SessionKey, int CheckerId, bool CheckerIdSpecified, object userState) {
            if ((this.DeleteCheckerOperationCompleted == null)) {
                this.DeleteCheckerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCheckerOperationCompleted);
            }
            this.InvokeAsync("DeleteChecker", new object[] {
                        SessionKey,
                        CheckerId,
                        CheckerIdSpecified}, this.DeleteCheckerOperationCompleted, userState);
        }
        
        private void OnDeleteCheckerOperationCompleted(object arg) {
            if ((this.DeleteCheckerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCheckerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetContests", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public ContestDTO[] GetContests([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetContests", new object[] {
                        SessionKey});
            return ((ContestDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContestsAsync(string SessionKey) {
            this.GetContestsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetContestsAsync(string SessionKey, object userState) {
            if ((this.GetContestsOperationCompleted == null)) {
                this.GetContestsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContestsOperationCompleted);
            }
            this.InvokeAsync("GetContests", new object[] {
                        SessionKey}, this.GetContestsOperationCompleted, userState);
        }
        
        private void OnGetContestsOperationCompleted(object arg) {
            if ((this.GetContestsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContestsCompleted(this, new GetContestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ContestExDTO GetContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified) {
            object[] results = this.Invoke("GetContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified});
            return ((ContestExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified) {
            this.GetContestAsync(SessionKey, ContestId, ContestIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, object userState) {
            if ((this.GetContestOperationCompleted == null)) {
                this.GetContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContestOperationCompleted);
            }
            this.InvokeAsync("GetContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified}, this.GetContestOperationCompleted, userState);
        }
        
        private void OnGetContestOperationCompleted(object arg) {
            if ((this.GetContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContestCompleted(this, new GetContestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] ContestExDTO Contest) {
            this.Invoke("UpdateContest", new object[] {
                        SessionKey,
                        Contest});
        }
        
        /// <remarks/>
        public void UpdateContestAsync(string SessionKey, ContestExDTO Contest) {
            this.UpdateContestAsync(SessionKey, Contest, null);
        }
        
        /// <remarks/>
        public void UpdateContestAsync(string SessionKey, ContestExDTO Contest, object userState) {
            if ((this.UpdateContestOperationCompleted == null)) {
                this.UpdateContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContestOperationCompleted);
            }
            this.InvokeAsync("UpdateContest", new object[] {
                        SessionKey,
                        Contest}, this.UpdateContestOperationCompleted, userState);
        }
        
        private void OnUpdateContestOperationCompleted(object arg) {
            if ((this.UpdateContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateGroupsForContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateGroupsForContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")] GroupInContestDTO[] newGroupCollecton) {
            this.Invoke("UpdateGroupsForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newGroupCollecton});
        }
        
        /// <remarks/>
        public void UpdateGroupsForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, GroupInContestDTO[] newGroupCollecton) {
            this.UpdateGroupsForContestAsync(SessionKey, ContestId, ContestIdSpecified, newGroupCollecton, null);
        }
        
        /// <remarks/>
        public void UpdateGroupsForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, GroupInContestDTO[] newGroupCollecton, object userState) {
            if ((this.UpdateGroupsForContestOperationCompleted == null)) {
                this.UpdateGroupsForContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupsForContestOperationCompleted);
            }
            this.InvokeAsync("UpdateGroupsForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newGroupCollecton}, this.UpdateGroupsForContestOperationCompleted, userState);
        }
        
        private void OnUpdateGroupsForContestOperationCompleted(object arg) {
            if ((this.UpdateGroupsForContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupsForContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateCompilersForContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCompilersForContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] int[] newCompilerIdCollecton) {
            this.Invoke("UpdateCompilersForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newCompilerIdCollecton});
        }
        
        /// <remarks/>
        public void UpdateCompilersForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, int[] newCompilerIdCollecton) {
            this.UpdateCompilersForContestAsync(SessionKey, ContestId, ContestIdSpecified, newCompilerIdCollecton, null);
        }
        
        /// <remarks/>
        public void UpdateCompilersForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, int[] newCompilerIdCollecton, object userState) {
            if ((this.UpdateCompilersForContestOperationCompleted == null)) {
                this.UpdateCompilersForContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompilersForContestOperationCompleted);
            }
            this.InvokeAsync("UpdateCompilersForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newCompilerIdCollecton}, this.UpdateCompilersForContestOperationCompleted, userState);
        }
        
        private void OnUpdateCompilersForContestOperationCompleted(object arg) {
            if ((this.UpdateCompilersForContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompilersForContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateTasksForContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTasksForContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")] TaskInContestDTO[] newTasksCollecton) {
            this.Invoke("UpdateTasksForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newTasksCollecton});
        }
        
        /// <remarks/>
        public void UpdateTasksForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, TaskInContestDTO[] newTasksCollecton) {
            this.UpdateTasksForContestAsync(SessionKey, ContestId, ContestIdSpecified, newTasksCollecton, null);
        }
        
        /// <remarks/>
        public void UpdateTasksForContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, TaskInContestDTO[] newTasksCollecton, object userState) {
            if ((this.UpdateTasksForContestOperationCompleted == null)) {
                this.UpdateTasksForContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTasksForContestOperationCompleted);
            }
            this.InvokeAsync("UpdateTasksForContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        newTasksCollecton}, this.UpdateTasksForContestOperationCompleted, userState);
        }
        
        private void OnUpdateTasksForContestOperationCompleted(object arg) {
            if ((this.UpdateTasksForContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTasksForContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ContestExDTO CreateContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("CreateContest", new object[] {
                        SessionKey});
            return ((ContestExDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateContestAsync(string SessionKey) {
            this.CreateContestAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void CreateContestAsync(string SessionKey, object userState) {
            if ((this.CreateContestOperationCompleted == null)) {
                this.CreateContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateContestOperationCompleted);
            }
            this.InvokeAsync("CreateContest", new object[] {
                        SessionKey}, this.CreateContestOperationCompleted, userState);
        }
        
        private void OnCreateContestOperationCompleted(object arg) {
            if ((this.CreateContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateContestCompleted(this, new CreateContestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteContest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteContest([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified) {
            this.Invoke("DeleteContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified) {
            this.DeleteContestAsync(SessionKey, ContestId, ContestIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteContestAsync(string SessionKey, int ContestId, bool ContestIdSpecified, object userState) {
            if ((this.DeleteContestOperationCompleted == null)) {
                this.DeleteContestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContestOperationCompleted);
            }
            this.InvokeAsync("DeleteContest", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified}, this.DeleteContestOperationCompleted, userState);
        }
        
        private void OnDeleteContestOperationCompleted(object arg) {
            if ((this.DeleteContestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetWellcomeText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetWellcomeText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified) {
            object[] results = this.Invoke("GetWellcomeText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetWellcomeTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified) {
            this.GetWellcomeTextAsync(SessionKey, ContestId, ContestIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetWellcomeTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, object userState) {
            if ((this.GetWellcomeTextOperationCompleted == null)) {
                this.GetWellcomeTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWellcomeTextOperationCompleted);
            }
            this.InvokeAsync("GetWellcomeText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified}, this.GetWellcomeTextOperationCompleted, userState);
        }
        
        private void OnGetWellcomeTextOperationCompleted(object arg) {
            if ((this.GetWellcomeTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWellcomeTextCompleted(this, new GetWellcomeTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateWellcomeText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateWellcomeText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string WellcomeText) {
            this.Invoke("UpdateWellcomeText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        WellcomeText});
        }
        
        /// <remarks/>
        public void UpdateWellcomeTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, string WellcomeText) {
            this.UpdateWellcomeTextAsync(SessionKey, ContestId, ContestIdSpecified, WellcomeText, null);
        }
        
        /// <remarks/>
        public void UpdateWellcomeTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, string WellcomeText, object userState) {
            if ((this.UpdateWellcomeTextOperationCompleted == null)) {
                this.UpdateWellcomeTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWellcomeTextOperationCompleted);
            }
            this.InvokeAsync("UpdateWellcomeText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        WellcomeText}, this.UpdateWellcomeTextOperationCompleted, userState);
        }
        
        private void OnUpdateWellcomeTextOperationCompleted(object arg) {
            if ((this.UpdateWellcomeTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWellcomeTextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetSponsorText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetSponsorText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified) {
            object[] results = this.Invoke("GetSponsorText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSponsorTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified) {
            this.GetSponsorTextAsync(SessionKey, ContestId, ContestIdSpecified, null);
        }
        
        /// <remarks/>
        public void GetSponsorTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, object userState) {
            if ((this.GetSponsorTextOperationCompleted == null)) {
                this.GetSponsorTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSponsorTextOperationCompleted);
            }
            this.InvokeAsync("GetSponsorText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified}, this.GetSponsorTextOperationCompleted, userState);
        }
        
        private void OnGetSponsorTextOperationCompleted(object arg) {
            if ((this.GetSponsorTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSponsorTextCompleted(this, new GetSponsorTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateSponsorText", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSponsorText([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ContestId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ContestIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SponsorText) {
            this.Invoke("UpdateSponsorText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        SponsorText});
        }
        
        /// <remarks/>
        public void UpdateSponsorTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, string SponsorText) {
            this.UpdateSponsorTextAsync(SessionKey, ContestId, ContestIdSpecified, SponsorText, null);
        }
        
        /// <remarks/>
        public void UpdateSponsorTextAsync(string SessionKey, int ContestId, bool ContestIdSpecified, string SponsorText, object userState) {
            if ((this.UpdateSponsorTextOperationCompleted == null)) {
                this.UpdateSponsorTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSponsorTextOperationCompleted);
            }
            this.InvokeAsync("UpdateSponsorText", new object[] {
                        SessionKey,
                        ContestId,
                        ContestIdSpecified,
                        SponsorText}, this.UpdateSponsorTextOperationCompleted, userState);
        }
        
        private void OnUpdateSponsorTextOperationCompleted(object arg) {
            if ((this.UpdateSponsorTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSponsorTextCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetContestTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public ContestTypeDTO[] GetContestTypes([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetContestTypes", new object[] {
                        SessionKey});
            return ((ContestTypeDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetContestTypesAsync(string SessionKey) {
            this.GetContestTypesAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetContestTypesAsync(string SessionKey, object userState) {
            if ((this.GetContestTypesOperationCompleted == null)) {
                this.GetContestTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContestTypesOperationCompleted);
            }
            this.InvokeAsync("GetContestTypes", new object[] {
                        SessionKey}, this.GetContestTypesOperationCompleted, userState);
        }
        
        private void OnGetContestTypesOperationCompleted(object arg) {
            if ((this.GetContestTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContestTypesCompleted(this, new GetContestTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetLogForUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public LogForUserDTO[] GetLogForUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetLogForUser", new object[] {
                        SessionKey});
            return ((LogForUserDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLogForUserAsync(string SessionKey) {
            this.GetLogForUserAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetLogForUserAsync(string SessionKey, object userState) {
            if ((this.GetLogForUserOperationCompleted == null)) {
                this.GetLogForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogForUserOperationCompleted);
            }
            this.InvokeAsync("GetLogForUser", new object[] {
                        SessionKey}, this.GetLogForUserOperationCompleted, userState);
        }
        
        private void OnGetLogForUserOperationCompleted(object arg) {
            if ((this.GetLogForUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogForUserCompleted(this, new GetLogForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAllSettings", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public SettingDTO[] GetAllSettings([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetAllSettings", new object[] {
                        SessionKey});
            return ((SettingDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSettingsAsync(string SessionKey) {
            this.GetAllSettingsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetAllSettingsAsync(string SessionKey, object userState) {
            if ((this.GetAllSettingsOperationCompleted == null)) {
                this.GetAllSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSettingsOperationCompleted);
            }
            this.InvokeAsync("GetAllSettings", new object[] {
                        SessionKey}, this.GetAllSettingsOperationCompleted, userState);
        }
        
        private void OnGetAllSettingsOperationCompleted(object arg) {
            if ((this.GetAllSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSettingsCompleted(this, new GetAllSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSetting([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int settingId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool settingIdSpecified) {
            this.Invoke("DeleteSetting", new object[] {
                        SessionKey,
                        settingId,
                        settingIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteSettingAsync(string SessionKey, int settingId, bool settingIdSpecified) {
            this.DeleteSettingAsync(SessionKey, settingId, settingIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteSettingAsync(string SessionKey, int settingId, bool settingIdSpecified, object userState) {
            if ((this.DeleteSettingOperationCompleted == null)) {
                this.DeleteSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSettingOperationCompleted);
            }
            this.InvokeAsync("DeleteSetting", new object[] {
                        SessionKey,
                        settingId,
                        settingIdSpecified}, this.DeleteSettingOperationCompleted, userState);
        }
        
        private void OnDeleteSettingOperationCompleted(object arg) {
            if ((this.DeleteSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSettingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/AddOrUpdateSetting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddOrUpdateSetting([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] SettingDTO setting, out int AddOrUpdateSettingResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool AddOrUpdateSettingResultSpecified) {
            object[] results = this.Invoke("AddOrUpdateSetting", new object[] {
                        SessionKey,
                        setting});
            AddOrUpdateSettingResult = ((int)(results[0]));
            AddOrUpdateSettingResultSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void AddOrUpdateSettingAsync(string SessionKey, SettingDTO setting) {
            this.AddOrUpdateSettingAsync(SessionKey, setting, null);
        }
        
        /// <remarks/>
        public void AddOrUpdateSettingAsync(string SessionKey, SettingDTO setting, object userState) {
            if ((this.AddOrUpdateSettingOperationCompleted == null)) {
                this.AddOrUpdateSettingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateSettingOperationCompleted);
            }
            this.InvokeAsync("AddOrUpdateSetting", new object[] {
                        SessionKey,
                        setting}, this.AddOrUpdateSettingOperationCompleted, userState);
        }
        
        private void OnAddOrUpdateSettingOperationCompleted(object arg) {
            if ((this.AddOrUpdateSettingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrUpdateSettingCompleted(this, new AddOrUpdateSettingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAdmins", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public AdminDTO[] GetAdmins([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetAdmins", new object[] {
                        SessionKey});
            return ((AdminDTO[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAdminsAsync(string SessionKey) {
            this.GetAdminsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetAdminsAsync(string SessionKey, object userState) {
            if ((this.GetAdminsOperationCompleted == null)) {
                this.GetAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdminsOperationCompleted);
            }
            this.InvokeAsync("GetAdmins", new object[] {
                        SessionKey}, this.GetAdminsOperationCompleted, userState);
        }
        
        private void OnGetAdminsOperationCompleted(object arg) {
            if ((this.GetAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdminsCompleted(this, new GetAdminsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetCollection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AdminDTO GetCollection([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string str) {
            object[] results = this.Invoke("GetCollection", new object[] {
                        SessionKey,
                        str});
            return ((AdminDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionAsync(string SessionKey, string str) {
            this.GetCollectionAsync(SessionKey, str, null);
        }
        
        /// <remarks/>
        public void GetCollectionAsync(string SessionKey, string str, object userState) {
            if ((this.GetCollectionOperationCompleted == null)) {
                this.GetCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionOperationCompleted);
            }
            this.InvokeAsync("GetCollection", new object[] {
                        SessionKey,
                        str}, this.GetCollectionOperationCompleted, userState);
        }
        
        private void OnGetCollectionOperationCompleted(object arg) {
            if ((this.GetCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionCompleted(this, new GetCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AdminDTO GetAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified) {
            object[] results = this.Invoke("GetAdmin", new object[] {
                        SessionKey,
                        id,
                        idSpecified});
            return ((AdminDTO)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdminAsync(string SessionKey, int id, bool idSpecified) {
            this.GetAdminAsync(SessionKey, id, idSpecified, null);
        }
        
        /// <remarks/>
        public void GetAdminAsync(string SessionKey, int id, bool idSpecified, object userState) {
            if ((this.GetAdminOperationCompleted == null)) {
                this.GetAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdminOperationCompleted);
            }
            this.InvokeAsync("GetAdmin", new object[] {
                        SessionKey,
                        id,
                        idSpecified}, this.GetAdminOperationCompleted, userState);
        }
        
        private void OnGetAdminOperationCompleted(object arg) {
            if ((this.GetAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdminCompleted(this, new GetAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetCollectionAccess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public AccessToPanel[] GetCollectionAccess([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int ID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool IDSpecified) {
            object[] results = this.Invoke("GetCollectionAccess", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified});
            return ((AccessToPanel[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionAccessAsync(string SessionKey, int ID, bool IDSpecified) {
            this.GetCollectionAccessAsync(SessionKey, ID, IDSpecified, null);
        }
        
        /// <remarks/>
        public void GetCollectionAccessAsync(string SessionKey, int ID, bool IDSpecified, object userState) {
            if ((this.GetCollectionAccessOperationCompleted == null)) {
                this.GetCollectionAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionAccessOperationCompleted);
            }
            this.InvokeAsync("GetCollectionAccess", new object[] {
                        SessionKey,
                        ID,
                        IDSpecified}, this.GetCollectionAccessOperationCompleted, userState);
        }
        
        private void OnGetCollectionAccessOperationCompleted(object arg) {
            if ((this.GetCollectionAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionAccessCompleted(this, new GetCollectionAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetCollectionButtons", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
        public AccessButtons[] GetCollectionButtons([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("GetCollectionButtons", new object[] {
                        SessionKey});
            return ((AccessButtons[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCollectionButtonsAsync(string SessionKey) {
            this.GetCollectionButtonsAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void GetCollectionButtonsAsync(string SessionKey, object userState) {
            if ((this.GetCollectionButtonsOperationCompleted == null)) {
                this.GetCollectionButtonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCollectionButtonsOperationCompleted);
            }
            this.InvokeAsync("GetCollectionButtons", new object[] {
                        SessionKey}, this.GetCollectionButtonsOperationCompleted, userState);
        }
        
        private void OnGetCollectionButtonsOperationCompleted(object arg) {
            if ((this.GetCollectionButtonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCollectionButtonsCompleted(this, new GetCollectionButtonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GenerateNewAdminPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GenerateNewAdminPassword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int AdminId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AdminIdSpecified) {
            object[] results = this.Invoke("GenerateNewAdminPassword", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateNewAdminPasswordAsync(string SessionKey, int AdminId, bool AdminIdSpecified) {
            this.GenerateNewAdminPasswordAsync(SessionKey, AdminId, AdminIdSpecified, null);
        }
        
        /// <remarks/>
        public void GenerateNewAdminPasswordAsync(string SessionKey, int AdminId, bool AdminIdSpecified, object userState) {
            if ((this.GenerateNewAdminPasswordOperationCompleted == null)) {
                this.GenerateNewAdminPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateNewAdminPasswordOperationCompleted);
            }
            this.InvokeAsync("GenerateNewAdminPassword", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified}, this.GenerateNewAdminPasswordOperationCompleted, userState);
        }
        
        private void OnGenerateNewAdminPasswordOperationCompleted(object arg) {
            if ((this.GenerateNewAdminPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateNewAdminPasswordCompleted(this, new GenerateNewAdminPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/GetNewPasswordForAdminAndSendByEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetNewPasswordForAdminAndSendByEmail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            object[] results = this.Invoke("GetNewPasswordForAdminAndSendByEmail", new object[] {
                        SessionKey,
                        id,
                        idSpecified,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewPasswordForAdminAndSendByEmailAsync(string SessionKey, int id, bool idSpecified, string password) {
            this.GetNewPasswordForAdminAndSendByEmailAsync(SessionKey, id, idSpecified, password, null);
        }
        
        /// <remarks/>
        public void GetNewPasswordForAdminAndSendByEmailAsync(string SessionKey, int id, bool idSpecified, string password, object userState) {
            if ((this.GetNewPasswordForAdminAndSendByEmailOperationCompleted == null)) {
                this.GetNewPasswordForAdminAndSendByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewPasswordForAdminAndSendByEmailOperationCompleted);
            }
            this.InvokeAsync("GetNewPasswordForAdminAndSendByEmail", new object[] {
                        SessionKey,
                        id,
                        idSpecified,
                        password}, this.GetNewPasswordForAdminAndSendByEmailOperationCompleted, userState);
        }
        
        private void OnGetNewPasswordForAdminAndSendByEmailOperationCompleted(object arg) {
            if ((this.GetNewPasswordForAdminAndSendByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewPasswordForAdminAndSendByEmailCompleted(this, new GetNewPasswordForAdminAndSendByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateNewPasswordUseble", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CreateNewPasswordUseble([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int AdminId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AdminIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pass) {
            object[] results = this.Invoke("CreateNewPasswordUseble", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified,
                        pass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewPasswordUsebleAsync(string SessionKey, int AdminId, bool AdminIdSpecified, string pass) {
            this.CreateNewPasswordUsebleAsync(SessionKey, AdminId, AdminIdSpecified, pass, null);
        }
        
        /// <remarks/>
        public void CreateNewPasswordUsebleAsync(string SessionKey, int AdminId, bool AdminIdSpecified, string pass, object userState) {
            if ((this.CreateNewPasswordUsebleOperationCompleted == null)) {
                this.CreateNewPasswordUsebleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewPasswordUsebleOperationCompleted);
            }
            this.InvokeAsync("CreateNewPasswordUseble", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified,
                        pass}, this.CreateNewPasswordUsebleOperationCompleted, userState);
        }
        
        private void OnCreateNewPasswordUsebleOperationCompleted(object arg) {
            if ((this.CreateNewPasswordUsebleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewPasswordUsebleCompleted(this, new CreateNewPasswordUsebleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/CreateAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public AdminDTO CreateAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey) {
            object[] results = this.Invoke("CreateAdmin", new object[] {
                        SessionKey});
            return ((AdminDTO)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAdminAsync(string SessionKey) {
            this.CreateAdminAsync(SessionKey, null);
        }
        
        /// <remarks/>
        public void CreateAdminAsync(string SessionKey, object userState) {
            if ((this.CreateAdminOperationCompleted == null)) {
                this.CreateAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAdminOperationCompleted);
            }
            this.InvokeAsync("CreateAdmin", new object[] {
                        SessionKey}, this.CreateAdminOperationCompleted, userState);
        }
        
        private void OnCreateAdminOperationCompleted(object arg) {
            if ((this.CreateAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAdminCompleted(this, new CreateAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/UpdateAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AdminDTO Admin) {
            this.Invoke("UpdateAdmin", new object[] {
                        SessionKey,
                        Admin});
        }
        
        /// <remarks/>
        public void UpdateAdminAsync(string SessionKey, AdminDTO Admin) {
            this.UpdateAdminAsync(SessionKey, Admin, null);
        }
        
        /// <remarks/>
        public void UpdateAdminAsync(string SessionKey, AdminDTO Admin, object userState) {
            if ((this.UpdateAdminOperationCompleted == null)) {
                this.UpdateAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdminOperationCompleted);
            }
            this.InvokeAsync("UpdateAdmin", new object[] {
                        SessionKey,
                        Admin}, this.UpdateAdminOperationCompleted, userState);
        }
        
        private void OnUpdateAdminOperationCompleted(object arg) {
            if ((this.UpdateAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdminCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/WebUpdateAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WebUpdateAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] AdminDTO Admin, int id, [System.Xml.Serialization.XmlIgnoreAttribute()] bool idSpecified, bool Notify, [System.Xml.Serialization.XmlIgnoreAttribute()] bool NotifySpecified, bool acess, [System.Xml.Serialization.XmlIgnoreAttribute()] bool acessSpecified) {
            this.Invoke("WebUpdateAdmin", new object[] {
                        SessionKey,
                        Admin,
                        id,
                        idSpecified,
                        Notify,
                        NotifySpecified,
                        acess,
                        acessSpecified});
        }
        
        /// <remarks/>
        public void WebUpdateAdminAsync(string SessionKey, AdminDTO Admin, int id, bool idSpecified, bool Notify, bool NotifySpecified, bool acess, bool acessSpecified) {
            this.WebUpdateAdminAsync(SessionKey, Admin, id, idSpecified, Notify, NotifySpecified, acess, acessSpecified, null);
        }
        
        /// <remarks/>
        public void WebUpdateAdminAsync(string SessionKey, AdminDTO Admin, int id, bool idSpecified, bool Notify, bool NotifySpecified, bool acess, bool acessSpecified, object userState) {
            if ((this.WebUpdateAdminOperationCompleted == null)) {
                this.WebUpdateAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebUpdateAdminOperationCompleted);
            }
            this.InvokeAsync("WebUpdateAdmin", new object[] {
                        SessionKey,
                        Admin,
                        id,
                        idSpecified,
                        Notify,
                        NotifySpecified,
                        acess,
                        acessSpecified}, this.WebUpdateAdminOperationCompleted, userState);
        }
        
        private void OnWebUpdateAdminOperationCompleted(object arg) {
            if ((this.WebUpdateAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebUpdateAdminCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/DeleteAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAdmin([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int AdminId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AdminIdSpecified) {
            this.Invoke("DeleteAdmin", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified});
        }
        
        /// <remarks/>
        public void DeleteAdminAsync(string SessionKey, int AdminId, bool AdminIdSpecified) {
            this.DeleteAdminAsync(SessionKey, AdminId, AdminIdSpecified, null);
        }
        
        /// <remarks/>
        public void DeleteAdminAsync(string SessionKey, int AdminId, bool AdminIdSpecified, object userState) {
            if ((this.DeleteAdminOperationCompleted == null)) {
                this.DeleteAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAdminOperationCompleted);
            }
            this.InvokeAsync("DeleteAdmin", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified}, this.DeleteAdminOperationCompleted, userState);
        }
        
        private void OnDeleteAdminOperationCompleted(object arg) {
            if ((this.DeleteAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAdminCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IServiceForAdmin/AccessAdmins", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AccessAdmins([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SessionKey, int AdminId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool AdminIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)] bool[] access) {
            this.Invoke("AccessAdmins", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified,
                        access});
        }
        
        /// <remarks/>
        public void AccessAdminsAsync(string SessionKey, int AdminId, bool AdminIdSpecified, bool[] access) {
            this.AccessAdminsAsync(SessionKey, AdminId, AdminIdSpecified, access, null);
        }
        
        /// <remarks/>
        public void AccessAdminsAsync(string SessionKey, int AdminId, bool AdminIdSpecified, bool[] access, object userState) {
            if ((this.AccessAdminsOperationCompleted == null)) {
                this.AccessAdminsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAccessAdminsOperationCompleted);
            }
            this.InvokeAsync("AccessAdmins", new object[] {
                        SessionKey,
                        AdminId,
                        AdminIdSpecified,
                        access}, this.AccessAdminsOperationCompleted, userState);
        }
        
        private void OnAccessAdminsOperationCompleted(object arg) {
            if ((this.AccessAdminsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AccessAdminsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class DictionaryCollectionDTO {
        
        private KeyValueDTO[] contestsField;
        
        private KeyValueDTO[] tasksField;
        
        private KeyValueDTO[] usersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public KeyValueDTO[] Contests {
            get {
                return this.contestsField;
            }
            set {
                this.contestsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public KeyValueDTO[] Tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public KeyValueDTO[] Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class KeyValueDTO {
        
        private System.Nullable<int> keyField;
        
        private bool keyFieldSpecified;
        
        private string stringValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeySpecified {
            get {
                return this.keyFieldSpecified;
            }
            set {
                this.keyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class AccessButtons {
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string nameButtonField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NameButton {
            get {
                return this.nameButtonField;
            }
            set {
                this.nameButtonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class AccessToPanel {
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private int iD_AdminField;
        
        private bool iD_AdminFieldSpecified;
        
        private int iD_ButtonField;
        
        private bool iD_ButtonFieldSpecified;
        
        private bool yesNoAccessField;
        
        private bool yesNoAccessFieldSpecified;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int ID_Admin {
            get {
                return this.iD_AdminField;
            }
            set {
                this.iD_AdminField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ID_AdminSpecified {
            get {
                return this.iD_AdminFieldSpecified;
            }
            set {
                this.iD_AdminFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int ID_Button {
            get {
                return this.iD_ButtonField;
            }
            set {
                this.iD_ButtonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ID_ButtonSpecified {
            get {
                return this.iD_ButtonFieldSpecified;
            }
            set {
                this.iD_ButtonFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool YesNoAccess {
            get {
                return this.yesNoAccessField;
            }
            set {
                this.yesNoAccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool YesNoAccessSpecified {
            get {
                return this.yesNoAccessFieldSpecified;
            }
            set {
                this.yesNoAccessFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class AdminDTO {
        
        private bool allowAccessToAdminPanelField;
        
        private bool allowAccessToAdminPanelFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string loginField;
        
        private bool notifyNewRegistrationsField;
        
        private bool notifyNewRegistrationsFieldSpecified;
        
        private string emailField;
        
        /// <remarks/>
        public bool AllowAccessToAdminPanel {
            get {
                return this.allowAccessToAdminPanelField;
            }
            set {
                this.allowAccessToAdminPanelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowAccessToAdminPanelSpecified {
            get {
                return this.allowAccessToAdminPanelFieldSpecified;
            }
            set {
                this.allowAccessToAdminPanelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public bool NotifyNewRegistrations {
            get {
                return this.notifyNewRegistrationsField;
            }
            set {
                this.notifyNewRegistrationsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotifyNewRegistrationsSpecified {
            get {
                return this.notifyNewRegistrationsFieldSpecified;
            }
            set {
                this.notifyNewRegistrationsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class SettingDTO {
        
        private string descriptionField;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string keyNameField;
        
        private System.Nullable<bool> valueBoolField;
        
        private bool valueBoolFieldSpecified;
        
        private System.Nullable<System.DateTime> valueDateTimeField;
        
        private bool valueDateTimeFieldSpecified;
        
        private string valueGuidField;
        
        private System.Nullable<int> valueIntField;
        
        private bool valueIntFieldSpecified;
        
        private System.Nullable<double> valueRealField;
        
        private bool valueRealFieldSpecified;
        
        private string valueStringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string KeyName {
            get {
                return this.keyNameField;
            }
            set {
                this.keyNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ValueBool {
            get {
                return this.valueBoolField;
            }
            set {
                this.valueBoolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueBoolSpecified {
            get {
                return this.valueBoolFieldSpecified;
            }
            set {
                this.valueBoolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> ValueDateTime {
            get {
                return this.valueDateTimeField;
            }
            set {
                this.valueDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueDateTimeSpecified {
            get {
                return this.valueDateTimeFieldSpecified;
            }
            set {
                this.valueDateTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ValueGuid {
            get {
                return this.valueGuidField;
            }
            set {
                this.valueGuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ValueInt {
            get {
                return this.valueIntField;
            }
            set {
                this.valueIntField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueIntSpecified {
            get {
                return this.valueIntFieldSpecified;
            }
            set {
                this.valueIntFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> ValueReal {
            get {
                return this.valueRealField;
            }
            set {
                this.valueRealField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValueRealSpecified {
            get {
                return this.valueRealFieldSpecified;
            }
            set {
                this.valueRealFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ValueString {
            get {
                return this.valueStringField;
            }
            set {
                this.valueStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class LogForUserDTO {
        
        private System.DateTime dateTimeField;
        
        private bool dateTimeFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string messageField;
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateTimeSpecified {
            get {
                return this.dateTimeFieldSpecified;
            }
            set {
                this.dateTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class ContestTypeDTO {
        
        private string availableVerdictsField;
        
        private bool checkFirstFailField;
        
        private bool checkFirstFailFieldSpecified;
        
        private bool chooseMaximumSubmitField;
        
        private bool chooseMaximumSubmitFieldSpecified;
        
        private string formulaForPenaltyPointsField;
        
        private string formulaForPointsField;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string noFailVerdictsField;
        
        private string noteField;
        
        private string rullesField;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AvailableVerdicts {
            get {
                return this.availableVerdictsField;
            }
            set {
                this.availableVerdictsField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckFirstFail {
            get {
                return this.checkFirstFailField;
            }
            set {
                this.checkFirstFailField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CheckFirstFailSpecified {
            get {
                return this.checkFirstFailFieldSpecified;
            }
            set {
                this.checkFirstFailFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ChooseMaximumSubmit {
            get {
                return this.chooseMaximumSubmitField;
            }
            set {
                this.chooseMaximumSubmitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChooseMaximumSubmitSpecified {
            get {
                return this.chooseMaximumSubmitFieldSpecified;
            }
            set {
                this.chooseMaximumSubmitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FormulaForPenaltyPoints {
            get {
                return this.formulaForPenaltyPointsField;
            }
            set {
                this.formulaForPenaltyPointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FormulaForPoints {
            get {
                return this.formulaForPointsField;
            }
            set {
                this.formulaForPointsField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string NoFailVerdicts {
            get {
                return this.noFailVerdictsField;
            }
            set {
                this.noFailVerdictsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Rulles {
            get {
                return this.rullesField;
            }
            set {
                this.rullesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class TaskInContestDTO {
        
        private double costInContestField;
        
        private bool costInContestFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string taskIdInContestField;
        
        private string titleField;
        
        /// <remarks/>
        public double CostInContest {
            get {
                return this.costInContestField;
            }
            set {
                this.costInContestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CostInContestSpecified {
            get {
                return this.costInContestFieldSpecified;
            }
            set {
                this.costInContestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TaskIdInContest {
            get {
                return this.taskIdInContestField;
            }
            set {
                this.taskIdInContestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class GroupInContestDTO {
        
        private EnumGroupTypeForContest groupTypeField;
        
        private bool groupTypeFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string titleField;
        
        /// <remarks/>
        public EnumGroupTypeForContest GroupType {
            get {
                return this.groupTypeField;
            }
            set {
                this.groupTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupTypeSpecified {
            get {
                return this.groupTypeFieldSpecified;
            }
            set {
                this.groupTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices")]
    public enum EnumGroupTypeForContest {
        
        /// <remarks/>
        InCompetition,
        
        /// <remarks/>
        OutOfCompetition,
        
        /// <remarks/>
        Candidate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class ContestExDTO {
        
        private bool allowPracticeField;
        
        private bool allowPracticeFieldSpecified;
        
        private bool allowShowAllBoardField;
        
        private bool allowShowAllBoardFieldSpecified;
        
        private bool allowShowBoardForGuestField;
        
        private bool allowShowBoardForGuestFieldSpecified;
        
        private bool allowShowComplexityTaskField;
        
        private bool allowShowComplexityTaskFieldSpecified;
        
        private bool allowShowNumberFailTestField;
        
        private bool allowShowNumberFailTestFieldSpecified;
        
        private bool allowShowOnlyActiveUserInBoardField;
        
        private bool allowShowOnlyActiveUserInBoardFieldSpecified;
        
        private bool allowShowPointsInBoardField;
        
        private bool allowShowPointsInBoardFieldSpecified;
        
        private bool allowShowSubjectTaskField;
        
        private bool allowShowSubjectTaskFieldSpecified;
        
        private bool allowShowTaskAuthorField;
        
        private bool allowShowTaskAuthorFieldSpecified;
        
        private bool allowShowTaskForGuestField;
        
        private bool allowShowTaskForGuestFieldSpecified;
        
        private bool allowShowTaskSourceField;
        
        private bool allowShowTaskSourceFieldSpecified;
        
        private bool allowShowTimeInBoardField;
        
        private bool allowShowTimeInBoardFieldSpecified;
        
        private bool allowShowVirtualUserField;
        
        private bool allowShowVirtualUserFieldSpecified;
        
        private bool allowSwowSubmitsInBoardWhenFrozenTimeField;
        
        private bool allowSwowSubmitsInBoardWhenFrozenTimeFieldSpecified;
        
        private System.Nullable<int> autoRegisterToGroupIdField;
        
        private bool autoRegisterToGroupIdFieldSpecified;
        
        private CompilerDTO[] compilersField;
        
        private int contestTypeIdField;
        
        private bool contestTypeIdFieldSpecified;
        
        private System.Nullable<System.DateTime> dateEndField;
        
        private bool dateEndFieldSpecified;
        
        private System.Nullable<System.DateTime> dateFrozenField;
        
        private bool dateFrozenFieldSpecified;
        
        private System.DateTime dateStartField;
        
        private bool dateStartFieldSpecified;
        
        private System.Nullable<System.DateTime> dateUnfrozenField;
        
        private bool dateUnfrozenFieldSpecified;
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        private GroupInContestDTO[] groupsField;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private bool invididualDateStartField;
        
        private bool invididualDateStartFieldSpecified;
        
        private System.Nullable<int> mainContestId_IfVirtualField;
        
        private bool mainContestId_IfVirtualFieldSpecified;
        
        private string noteField;
        
        private string shortTitleField;
        
        private string sponsorTextField;
        
        private TaskInContestDTO[] tasksField;
        
        private string titleField;
        
        private bool virtualUserOutOfCompetitionField;
        
        private bool virtualUserOutOfCompetitionFieldSpecified;
        
        private string wellcomeTextField;
        
        /// <remarks/>
        public bool AllowPractice {
            get {
                return this.allowPracticeField;
            }
            set {
                this.allowPracticeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowPracticeSpecified {
            get {
                return this.allowPracticeFieldSpecified;
            }
            set {
                this.allowPracticeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowAllBoard {
            get {
                return this.allowShowAllBoardField;
            }
            set {
                this.allowShowAllBoardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowAllBoardSpecified {
            get {
                return this.allowShowAllBoardFieldSpecified;
            }
            set {
                this.allowShowAllBoardFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowBoardForGuest {
            get {
                return this.allowShowBoardForGuestField;
            }
            set {
                this.allowShowBoardForGuestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowBoardForGuestSpecified {
            get {
                return this.allowShowBoardForGuestFieldSpecified;
            }
            set {
                this.allowShowBoardForGuestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowComplexityTask {
            get {
                return this.allowShowComplexityTaskField;
            }
            set {
                this.allowShowComplexityTaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowComplexityTaskSpecified {
            get {
                return this.allowShowComplexityTaskFieldSpecified;
            }
            set {
                this.allowShowComplexityTaskFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowNumberFailTest {
            get {
                return this.allowShowNumberFailTestField;
            }
            set {
                this.allowShowNumberFailTestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowNumberFailTestSpecified {
            get {
                return this.allowShowNumberFailTestFieldSpecified;
            }
            set {
                this.allowShowNumberFailTestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowOnlyActiveUserInBoard {
            get {
                return this.allowShowOnlyActiveUserInBoardField;
            }
            set {
                this.allowShowOnlyActiveUserInBoardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowOnlyActiveUserInBoardSpecified {
            get {
                return this.allowShowOnlyActiveUserInBoardFieldSpecified;
            }
            set {
                this.allowShowOnlyActiveUserInBoardFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowPointsInBoard {
            get {
                return this.allowShowPointsInBoardField;
            }
            set {
                this.allowShowPointsInBoardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowPointsInBoardSpecified {
            get {
                return this.allowShowPointsInBoardFieldSpecified;
            }
            set {
                this.allowShowPointsInBoardFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowSubjectTask {
            get {
                return this.allowShowSubjectTaskField;
            }
            set {
                this.allowShowSubjectTaskField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowSubjectTaskSpecified {
            get {
                return this.allowShowSubjectTaskFieldSpecified;
            }
            set {
                this.allowShowSubjectTaskFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowTaskAuthor {
            get {
                return this.allowShowTaskAuthorField;
            }
            set {
                this.allowShowTaskAuthorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowTaskAuthorSpecified {
            get {
                return this.allowShowTaskAuthorFieldSpecified;
            }
            set {
                this.allowShowTaskAuthorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowTaskForGuest {
            get {
                return this.allowShowTaskForGuestField;
            }
            set {
                this.allowShowTaskForGuestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowTaskForGuestSpecified {
            get {
                return this.allowShowTaskForGuestFieldSpecified;
            }
            set {
                this.allowShowTaskForGuestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowTaskSource {
            get {
                return this.allowShowTaskSourceField;
            }
            set {
                this.allowShowTaskSourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowTaskSourceSpecified {
            get {
                return this.allowShowTaskSourceFieldSpecified;
            }
            set {
                this.allowShowTaskSourceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowTimeInBoard {
            get {
                return this.allowShowTimeInBoardField;
            }
            set {
                this.allowShowTimeInBoardField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowTimeInBoardSpecified {
            get {
                return this.allowShowTimeInBoardFieldSpecified;
            }
            set {
                this.allowShowTimeInBoardFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowShowVirtualUser {
            get {
                return this.allowShowVirtualUserField;
            }
            set {
                this.allowShowVirtualUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowShowVirtualUserSpecified {
            get {
                return this.allowShowVirtualUserFieldSpecified;
            }
            set {
                this.allowShowVirtualUserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool AllowSwowSubmitsInBoardWhenFrozenTime {
            get {
                return this.allowSwowSubmitsInBoardWhenFrozenTimeField;
            }
            set {
                this.allowSwowSubmitsInBoardWhenFrozenTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllowSwowSubmitsInBoardWhenFrozenTimeSpecified {
            get {
                return this.allowSwowSubmitsInBoardWhenFrozenTimeFieldSpecified;
            }
            set {
                this.allowSwowSubmitsInBoardWhenFrozenTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> AutoRegisterToGroupId {
            get {
                return this.autoRegisterToGroupIdField;
            }
            set {
                this.autoRegisterToGroupIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AutoRegisterToGroupIdSpecified {
            get {
                return this.autoRegisterToGroupIdFieldSpecified;
            }
            set {
                this.autoRegisterToGroupIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public CompilerDTO[] Compilers {
            get {
                return this.compilersField;
            }
            set {
                this.compilersField = value;
            }
        }
        
        /// <remarks/>
        public int ContestTypeId {
            get {
                return this.contestTypeIdField;
            }
            set {
                this.contestTypeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContestTypeIdSpecified {
            get {
                return this.contestTypeIdFieldSpecified;
            }
            set {
                this.contestTypeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> DateEnd {
            get {
                return this.dateEndField;
            }
            set {
                this.dateEndField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateEndSpecified {
            get {
                return this.dateEndFieldSpecified;
            }
            set {
                this.dateEndFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> DateFrozen {
            get {
                return this.dateFrozenField;
            }
            set {
                this.dateFrozenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateFrozenSpecified {
            get {
                return this.dateFrozenFieldSpecified;
            }
            set {
                this.dateFrozenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateStart {
            get {
                return this.dateStartField;
            }
            set {
                this.dateStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateStartSpecified {
            get {
                return this.dateStartFieldSpecified;
            }
            set {
                this.dateStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> DateUnfrozen {
            get {
                return this.dateUnfrozenField;
            }
            set {
                this.dateUnfrozenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateUnfrozenSpecified {
            get {
                return this.dateUnfrozenFieldSpecified;
            }
            set {
                this.dateUnfrozenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GroupInContestDTO[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool InvididualDateStart {
            get {
                return this.invididualDateStartField;
            }
            set {
                this.invididualDateStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvididualDateStartSpecified {
            get {
                return this.invididualDateStartFieldSpecified;
            }
            set {
                this.invididualDateStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MainContestId_IfVirtual {
            get {
                return this.mainContestId_IfVirtualField;
            }
            set {
                this.mainContestId_IfVirtualField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MainContestId_IfVirtualSpecified {
            get {
                return this.mainContestId_IfVirtualFieldSpecified;
            }
            set {
                this.mainContestId_IfVirtualFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ShortTitle {
            get {
                return this.shortTitleField;
            }
            set {
                this.shortTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SponsorText {
            get {
                return this.sponsorTextField;
            }
            set {
                this.sponsorTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TaskInContestDTO[] Tasks {
            get {
                return this.tasksField;
            }
            set {
                this.tasksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public bool VirtualUserOutOfCompetition {
            get {
                return this.virtualUserOutOfCompetitionField;
            }
            set {
                this.virtualUserOutOfCompetitionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VirtualUserOutOfCompetitionSpecified {
            get {
                return this.virtualUserOutOfCompetitionFieldSpecified;
            }
            set {
                this.virtualUserOutOfCompetitionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string WellcomeText {
            get {
                return this.wellcomeTextField;
            }
            set {
                this.wellcomeTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class CompilerDTO {
        
        private string compilePathField;
        
        private string compilerTypeField;
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        private string extensionField;
        
        private string fileNameSourceField;
        
        private string fileNameTargetField;
        
        private string fullNameField;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string noteField;
        
        private string runPathField;
        
        private string shortNameField;
        
        private string testCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CompilePath {
            get {
                return this.compilePathField;
            }
            set {
                this.compilePathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CompilerType {
            get {
                return this.compilerTypeField;
            }
            set {
                this.compilerTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FileNameSource {
            get {
                return this.fileNameSourceField;
            }
            set {
                this.fileNameSourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FileNameTarget {
            get {
                return this.fileNameTargetField;
            }
            set {
                this.fileNameTargetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string RunPath {
            get {
                return this.runPathField;
            }
            set {
                this.runPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ShortName {
            get {
                return this.shortNameField;
            }
            set {
                this.shortNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TestCode {
            get {
                return this.testCodeField;
            }
            set {
                this.testCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class TaskComlexity {
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string titleField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class TestDTO {
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string inputDataField;
        
        private bool multitestField;
        
        private bool multitestFieldSpecified;
        
        private int numberField;
        
        private bool numberFieldSpecified;
        
        private string patternDataField;
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string InputData {
            get {
                return this.inputDataField;
            }
            set {
                this.inputDataField = value;
            }
        }
        
        /// <remarks/>
        public bool Multitest {
            get {
                return this.multitestField;
            }
            set {
                this.multitestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MultitestSpecified {
            get {
                return this.multitestFieldSpecified;
            }
            set {
                this.multitestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified {
            get {
                return this.numberFieldSpecified;
            }
            set {
                this.numberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string PatternData {
            get {
                return this.patternDataField;
            }
            set {
                this.patternDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class CheckerDTO {
        
        private string codeField;
        
        private int compilerIdField;
        
        private bool compilerIdFieldSpecified;
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string noteField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public int CompilerId {
            get {
                return this.compilerIdField;
            }
            set {
                this.compilerIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompilerIdSpecified {
            get {
                return this.compilerIdFieldSpecified;
            }
            set {
                this.compilerIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class TaskExDTO {
        
        private string authorField;
        
        private CheckerDTO[] checkersField;
        
        private System.Nullable<int> codeLimitField;
        
        private bool codeLimitFieldSpecified;
        
        private System.Nullable<int> complexityIdField;
        
        private bool complexityIdFieldSpecified;
        
        private ContestDTO[] contestCollectionField;
        
        private int countTestToTextField;
        
        private bool countTestToTextFieldSpecified;
        
        private int defaultCodeLimitField;
        
        private bool defaultCodeLimitFieldSpecified;
        
        private int defaultOutputLimitField;
        
        private bool defaultOutputLimitFieldSpecified;
        
        private bool enableCheckField;
        
        private bool enableCheckFieldSpecified;
        
        private bool enableSendField;
        
        private bool enableSendFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private int memoryLimit_customField;
        
        private bool memoryLimit_customFieldSpecified;
        
        private int memoryLimit_dotnetField;
        
        private bool memoryLimit_dotnetFieldSpecified;
        
        private int memoryLimit_javavmField;
        
        private bool memoryLimit_javavmFieldSpecified;
        
        private int memoryLimit_nativeField;
        
        private bool memoryLimit_nativeFieldSpecified;
        
        private string noteField;
        
        private System.Nullable<int> outputLimitField;
        
        private bool outputLimitFieldSpecified;
        
        private string statementField;
        
        private byte[] statementPdfField;
        
        private bool taskHasPdfStatementField;
        
        private bool taskHasPdfStatementFieldSpecified;
        
        private string taskSourceField;
        
        private TestDTO[] testsField;
        
        private int timeLimit_customField;
        
        private bool timeLimit_customFieldSpecified;
        
        private int timeLimit_dotnetField;
        
        private bool timeLimit_dotnetFieldSpecified;
        
        private int timeLimit_javavmField;
        
        private bool timeLimit_javavmFieldSpecified;
        
        private int timeLimit_nativeField;
        
        private bool timeLimit_nativeFieldSpecified;
        
        private int timeSolveProblemField;
        
        private bool timeSolveProblemFieldSpecified;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public CheckerDTO[] Checkers {
            get {
                return this.checkersField;
            }
            set {
                this.checkersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CodeLimit {
            get {
                return this.codeLimitField;
            }
            set {
                this.codeLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeLimitSpecified {
            get {
                return this.codeLimitFieldSpecified;
            }
            set {
                this.codeLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ComplexityId {
            get {
                return this.complexityIdField;
            }
            set {
                this.complexityIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ComplexityIdSpecified {
            get {
                return this.complexityIdFieldSpecified;
            }
            set {
                this.complexityIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ContestDTO[] ContestCollection {
            get {
                return this.contestCollectionField;
            }
            set {
                this.contestCollectionField = value;
            }
        }
        
        /// <remarks/>
        public int CountTestToText {
            get {
                return this.countTestToTextField;
            }
            set {
                this.countTestToTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CountTestToTextSpecified {
            get {
                return this.countTestToTextFieldSpecified;
            }
            set {
                this.countTestToTextFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int DefaultCodeLimit {
            get {
                return this.defaultCodeLimitField;
            }
            set {
                this.defaultCodeLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultCodeLimitSpecified {
            get {
                return this.defaultCodeLimitFieldSpecified;
            }
            set {
                this.defaultCodeLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int DefaultOutputLimit {
            get {
                return this.defaultOutputLimitField;
            }
            set {
                this.defaultOutputLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultOutputLimitSpecified {
            get {
                return this.defaultOutputLimitFieldSpecified;
            }
            set {
                this.defaultOutputLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool EnableCheck {
            get {
                return this.enableCheckField;
            }
            set {
                this.enableCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnableCheckSpecified {
            get {
                return this.enableCheckFieldSpecified;
            }
            set {
                this.enableCheckFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool EnableSend {
            get {
                return this.enableSendField;
            }
            set {
                this.enableSendField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnableSendSpecified {
            get {
                return this.enableSendFieldSpecified;
            }
            set {
                this.enableSendFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int MemoryLimit_custom {
            get {
                return this.memoryLimit_customField;
            }
            set {
                this.memoryLimit_customField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemoryLimit_customSpecified {
            get {
                return this.memoryLimit_customFieldSpecified;
            }
            set {
                this.memoryLimit_customFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int MemoryLimit_dotnet {
            get {
                return this.memoryLimit_dotnetField;
            }
            set {
                this.memoryLimit_dotnetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemoryLimit_dotnetSpecified {
            get {
                return this.memoryLimit_dotnetFieldSpecified;
            }
            set {
                this.memoryLimit_dotnetFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int MemoryLimit_javavm {
            get {
                return this.memoryLimit_javavmField;
            }
            set {
                this.memoryLimit_javavmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemoryLimit_javavmSpecified {
            get {
                return this.memoryLimit_javavmFieldSpecified;
            }
            set {
                this.memoryLimit_javavmFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int MemoryLimit_native {
            get {
                return this.memoryLimit_nativeField;
            }
            set {
                this.memoryLimit_nativeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemoryLimit_nativeSpecified {
            get {
                return this.memoryLimit_nativeFieldSpecified;
            }
            set {
                this.memoryLimit_nativeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> OutputLimit {
            get {
                return this.outputLimitField;
            }
            set {
                this.outputLimitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OutputLimitSpecified {
            get {
                return this.outputLimitFieldSpecified;
            }
            set {
                this.outputLimitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Statement {
            get {
                return this.statementField;
            }
            set {
                this.statementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)]
        public byte[] StatementPdf {
            get {
                return this.statementPdfField;
            }
            set {
                this.statementPdfField = value;
            }
        }
        
        /// <remarks/>
        public bool TaskHasPdfStatement {
            get {
                return this.taskHasPdfStatementField;
            }
            set {
                this.taskHasPdfStatementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaskHasPdfStatementSpecified {
            get {
                return this.taskHasPdfStatementFieldSpecified;
            }
            set {
                this.taskHasPdfStatementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TaskSource {
            get {
                return this.taskSourceField;
            }
            set {
                this.taskSourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public TestDTO[] Tests {
            get {
                return this.testsField;
            }
            set {
                this.testsField = value;
            }
        }
        
        /// <remarks/>
        public int TimeLimit_custom {
            get {
                return this.timeLimit_customField;
            }
            set {
                this.timeLimit_customField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeLimit_customSpecified {
            get {
                return this.timeLimit_customFieldSpecified;
            }
            set {
                this.timeLimit_customFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TimeLimit_dotnet {
            get {
                return this.timeLimit_dotnetField;
            }
            set {
                this.timeLimit_dotnetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeLimit_dotnetSpecified {
            get {
                return this.timeLimit_dotnetFieldSpecified;
            }
            set {
                this.timeLimit_dotnetFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TimeLimit_javavm {
            get {
                return this.timeLimit_javavmField;
            }
            set {
                this.timeLimit_javavmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeLimit_javavmSpecified {
            get {
                return this.timeLimit_javavmFieldSpecified;
            }
            set {
                this.timeLimit_javavmFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TimeLimit_native {
            get {
                return this.timeLimit_nativeField;
            }
            set {
                this.timeLimit_nativeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeLimit_nativeSpecified {
            get {
                return this.timeLimit_nativeFieldSpecified;
            }
            set {
                this.timeLimit_nativeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TimeSolveProblem {
            get {
                return this.timeSolveProblemField;
            }
            set {
                this.timeSolveProblemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSolveProblemSpecified {
            get {
                return this.timeSolveProblemFieldSpecified;
            }
            set {
                this.timeSolveProblemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class ContestDTO {
        
        private bool enabledField;
        
        private bool enabledFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private System.Nullable<int> mainContestId_IfVirtualField;
        
        private bool mainContestId_IfVirtualFieldSpecified;
        
        private string noteField;
        
        private string shortTitleField;
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnabledSpecified {
            get {
                return this.enabledFieldSpecified;
            }
            set {
                this.enabledFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MainContestId_IfVirtual {
            get {
                return this.mainContestId_IfVirtualField;
            }
            set {
                this.mainContestId_IfVirtualField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MainContestId_IfVirtualSpecified {
            get {
                return this.mainContestId_IfVirtualFieldSpecified;
            }
            set {
                this.mainContestId_IfVirtualFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ShortTitle {
            get {
                return this.shortTitleField;
            }
            set {
                this.shortTitleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class TaskDTO {
        
        private ContestDTO[] contestCollectionField;
        
        private bool enableCheckField;
        
        private bool enableCheckFieldSpecified;
        
        private bool enableSendField;
        
        private bool enableSendFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string noteField;
        
        private string titleField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public ContestDTO[] ContestCollection {
            get {
                return this.contestCollectionField;
            }
            set {
                this.contestCollectionField = value;
            }
        }
        
        /// <remarks/>
        public bool EnableCheck {
            get {
                return this.enableCheckField;
            }
            set {
                this.enableCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnableCheckSpecified {
            get {
                return this.enableCheckFieldSpecified;
            }
            set {
                this.enableCheckFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool EnableSend {
            get {
                return this.enableSendField;
            }
            set {
                this.enableSendField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnableSendSpecified {
            get {
                return this.enableSendFieldSpecified;
            }
            set {
                this.enableSendFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class SubmitDTO {
        
        private string compilerFullNameField;
        
        private int compilerIdField;
        
        private bool compilerIdFieldSpecified;
        
        private string compilerShortNameField;
        
        private System.Nullable<int> contestIdField;
        
        private bool contestIdFieldSpecified;
        
        private string contestTitleField;
        
        private System.DateTime dateTimeSendField;
        
        private bool dateTimeSendFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private System.Nullable<int> maxUsedMemoryField;
        
        private bool maxUsedMemoryFieldSpecified;
        
        private System.Nullable<int> maxUsedTimeField;
        
        private bool maxUsedTimeFieldSpecified;
        
        private string noteField;
        
        private System.Nullable<int> numberFailTestField;
        
        private bool numberFailTestFieldSpecified;
        
        private bool sendInContestTimeField;
        
        private bool sendInContestTimeFieldSpecified;
        
        private double submitPenaltyField;
        
        private bool submitPenaltyFieldSpecified;
        
        private double submitPointsField;
        
        private bool submitPointsFieldSpecified;
        
        private System.Nullable<double> taskCostInContestField;
        
        private bool taskCostInContestFieldSpecified;
        
        private int taskIdField;
        
        private bool taskIdFieldSpecified;
        
        private string taskIdInContestField;
        
        private string taskTitleField;
        
        private System.Nullable<int> timeSendInContestField;
        
        private bool timeSendInContestFieldSpecified;
        
        private System.Nullable<int> userIdField;
        
        private bool userIdFieldSpecified;
        
        private string userNameField;
        
        private string verdictDescriptionField;
        
        private int verdictIdField;
        
        private bool verdictIdFieldSpecified;
        
        private bool verdictIsFinalField;
        
        private bool verdictIsFinalFieldSpecified;
        
        private string verdictShortCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CompilerFullName {
            get {
                return this.compilerFullNameField;
            }
            set {
                this.compilerFullNameField = value;
            }
        }
        
        /// <remarks/>
        public int CompilerId {
            get {
                return this.compilerIdField;
            }
            set {
                this.compilerIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CompilerIdSpecified {
            get {
                return this.compilerIdFieldSpecified;
            }
            set {
                this.compilerIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CompilerShortName {
            get {
                return this.compilerShortNameField;
            }
            set {
                this.compilerShortNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ContestId {
            get {
                return this.contestIdField;
            }
            set {
                this.contestIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContestIdSpecified {
            get {
                return this.contestIdFieldSpecified;
            }
            set {
                this.contestIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ContestTitle {
            get {
                return this.contestTitleField;
            }
            set {
                this.contestTitleField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateTimeSend {
            get {
                return this.dateTimeSendField;
            }
            set {
                this.dateTimeSendField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateTimeSendSpecified {
            get {
                return this.dateTimeSendFieldSpecified;
            }
            set {
                this.dateTimeSendFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxUsedMemory {
            get {
                return this.maxUsedMemoryField;
            }
            set {
                this.maxUsedMemoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxUsedMemorySpecified {
            get {
                return this.maxUsedMemoryFieldSpecified;
            }
            set {
                this.maxUsedMemoryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> MaxUsedTime {
            get {
                return this.maxUsedTimeField;
            }
            set {
                this.maxUsedTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxUsedTimeSpecified {
            get {
                return this.maxUsedTimeFieldSpecified;
            }
            set {
                this.maxUsedTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> NumberFailTest {
            get {
                return this.numberFailTestField;
            }
            set {
                this.numberFailTestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberFailTestSpecified {
            get {
                return this.numberFailTestFieldSpecified;
            }
            set {
                this.numberFailTestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool SendInContestTime {
            get {
                return this.sendInContestTimeField;
            }
            set {
                this.sendInContestTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SendInContestTimeSpecified {
            get {
                return this.sendInContestTimeFieldSpecified;
            }
            set {
                this.sendInContestTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double SubmitPenalty {
            get {
                return this.submitPenaltyField;
            }
            set {
                this.submitPenaltyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubmitPenaltySpecified {
            get {
                return this.submitPenaltyFieldSpecified;
            }
            set {
                this.submitPenaltyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double SubmitPoints {
            get {
                return this.submitPointsField;
            }
            set {
                this.submitPointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubmitPointsSpecified {
            get {
                return this.submitPointsFieldSpecified;
            }
            set {
                this.submitPointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> TaskCostInContest {
            get {
                return this.taskCostInContestField;
            }
            set {
                this.taskCostInContestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaskCostInContestSpecified {
            get {
                return this.taskCostInContestFieldSpecified;
            }
            set {
                this.taskCostInContestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TaskIdSpecified {
            get {
                return this.taskIdFieldSpecified;
            }
            set {
                this.taskIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TaskIdInContest {
            get {
                return this.taskIdInContestField;
            }
            set {
                this.taskIdInContestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string TaskTitle {
            get {
                return this.taskTitleField;
            }
            set {
                this.taskTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TimeSendInContest {
            get {
                return this.timeSendInContestField;
            }
            set {
                this.timeSendInContestField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSendInContestSpecified {
            get {
                return this.timeSendInContestFieldSpecified;
            }
            set {
                this.timeSendInContestFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserIdSpecified {
            get {
                return this.userIdFieldSpecified;
            }
            set {
                this.userIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VerdictDescription {
            get {
                return this.verdictDescriptionField;
            }
            set {
                this.verdictDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int VerdictId {
            get {
                return this.verdictIdField;
            }
            set {
                this.verdictIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerdictIdSpecified {
            get {
                return this.verdictIdFieldSpecified;
            }
            set {
                this.verdictIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool VerdictIsFinal {
            get {
                return this.verdictIsFinalField;
            }
            set {
                this.verdictIsFinalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VerdictIsFinalSpecified {
            get {
                return this.verdictIsFinalFieldSpecified;
            }
            set {
                this.verdictIsFinalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string VerdictShortCode {
            get {
                return this.verdictShortCodeField;
            }
            set {
                this.verdictShortCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class GroupDTO {
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string titleField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class UserExDTO {
        
        private string addressField;
        
        private System.Nullable<System.DateTime> blockedToField;
        
        private bool blockedToFieldSpecified;
        
        private string classCourseGroupField;
        
        private int[] contestCollectionField;
        
        private string emailField;
        
        private bool emailConfirmedField;
        
        private bool emailConfirmedFieldSpecified;
        
        private GroupDTO[] groupsField;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string institutionField;
        
        private System.Nullable<System.DateTime> lastActivityDateTimeField;
        
        private bool lastActivityDateTimeFieldSpecified;
        
        private string loginField;
        
        private int loginFailCountField;
        
        private bool loginFailCountFieldSpecified;
        
        private string nameField;
        
        private string noteField;
        
        private string phoneField;
        
        private System.DateTime registrationDateField;
        
        private bool registrationDateFieldSpecified;
        
        private bool sendNotificationsField;
        
        private bool sendNotificationsFieldSpecified;
        
        private string socialNetworksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> BlockedTo {
            get {
                return this.blockedToField;
            }
            set {
                this.blockedToField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BlockedToSpecified {
            get {
                return this.blockedToFieldSpecified;
            }
            set {
                this.blockedToFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ClassCourseGroup {
            get {
                return this.classCourseGroupField;
            }
            set {
                this.classCourseGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] ContestCollection {
            get {
                return this.contestCollectionField;
            }
            set {
                this.contestCollectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public bool EmailConfirmed {
            get {
                return this.emailConfirmedField;
            }
            set {
                this.emailConfirmedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EmailConfirmedSpecified {
            get {
                return this.emailConfirmedFieldSpecified;
            }
            set {
                this.emailConfirmedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        public GroupDTO[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Institution {
            get {
                return this.institutionField;
            }
            set {
                this.institutionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> LastActivityDateTime {
            get {
                return this.lastActivityDateTimeField;
            }
            set {
                this.lastActivityDateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastActivityDateTimeSpecified {
            get {
                return this.lastActivityDateTimeFieldSpecified;
            }
            set {
                this.lastActivityDateTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        public int LoginFailCount {
            get {
                return this.loginFailCountField;
            }
            set {
                this.loginFailCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoginFailCountSpecified {
            get {
                return this.loginFailCountFieldSpecified;
            }
            set {
                this.loginFailCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RegistrationDate {
            get {
                return this.registrationDateField;
            }
            set {
                this.registrationDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RegistrationDateSpecified {
            get {
                return this.registrationDateFieldSpecified;
            }
            set {
                this.registrationDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool SendNotifications {
            get {
                return this.sendNotificationsField;
            }
            set {
                this.sendNotificationsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SendNotificationsSpecified {
            get {
                return this.sendNotificationsFieldSpecified;
            }
            set {
                this.sendNotificationsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string SocialNetworks {
            get {
                return this.socialNetworksField;
            }
            set {
                this.socialNetworksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/WCFServices.ServiceForAdmin.DTO")]
    public partial class UserDTO {
        
        private System.Nullable<System.DateTime> blockedToField;
        
        private bool blockedToFieldSpecified;
        
        private int[] contestCollectionField;
        
        private System.DateTime dateRegistrationField;
        
        private bool dateRegistrationFieldSpecified;
        
        private int idField;
        
        private bool idFieldSpecified;
        
        private string loginField;
        
        private string nameField;
        
        private string noteField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> BlockedTo {
            get {
                return this.blockedToField;
            }
            set {
                this.blockedToField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BlockedToSpecified {
            get {
                return this.blockedToFieldSpecified;
            }
            set {
                this.blockedToFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", IsNullable=false)]
        public int[] ContestCollection {
            get {
                return this.contestCollectionField;
            }
            set {
                this.contestCollectionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateRegistration {
            get {
                return this.dateRegistrationField;
            }
            set {
                this.dateRegistrationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateRegistrationSpecified {
            get {
                return this.dateRegistrationFieldSpecified;
            }
            set {
                this.dateRegistrationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IdSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Login {
            get {
                return this.loginField;
            }
            set {
                this.loginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Note {
            get {
                return this.noteField;
            }
            set {
                this.noteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoginUserCompletedEventHandler(object sender, LoginUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetVersionAPICompletedEventHandler(object sender, GetVersionAPICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionAPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionAPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int GetVersionAPIResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetVersionAPIResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckDatabaseExistCompletedEventHandler(object sender, CheckDatabaseExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDatabaseExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDatabaseExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool CheckDatabaseExistResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool CheckDatabaseExistResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDictionariesCompletedEventHandler(object sender, GetDictionariesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDictionariesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDictionariesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DictionaryCollectionDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DictionaryCollectionDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetUserPasswordCompletedEventHandler(object sender, GetUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GenerateNewUserPasswordCompletedEventHandler(object sender, GenerateNewUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateNewUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateNewUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateOneUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BlockGroupUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnBlockGroupUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteGroupUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WebUpdateUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateGroupsForUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendPasswordOnEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ValidateUserEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ChangePasswordUsingUserEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllGroupsCompletedEventHandler(object sender, GetAllGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllUserInGroupCompletedEventHandler(object sender, GetAllUserInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllUserOutGroupCompletedEventHandler(object sender, GetAllUserOutGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserOutGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserOutGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGroupInfoCompletedEventHandler(object sender, GetGroupInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContestsInGroupCompletedEventHandler(object sender, GetContestsInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContestsInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContestsInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateGroupCompletedEventHandler(object sender, CreateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GroupDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GroupDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WebUpdateGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddInGroupCompletedEventHandler(object sender, AddInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteOutFromGroupCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCompilersCompletedEventHandler(object sender, GetCompilersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompilersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompilersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompilerDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompilerDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCompilerCompletedEventHandler(object sender, GetCompilerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompilerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompilerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompilerDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompilerDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void InsertOrUpdateCompilerCompletedEventHandler(object sender, InsertOrUpdateCompilerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertOrUpdateCompilerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertOrUpdateCompilerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int InsertOrUpdateCompilerResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool InsertOrUpdateCompilerResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteCompilerCompletedEventHandler(object sender, DeleteCompilerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompilerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompilerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteCompilerResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteCompilerResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSubmitsCompletedEventHandler(object sender, GetSubmitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubmitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubmitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubmitDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubmitDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WebGetSubmitsCompletedEventHandler(object sender, WebGetSubmitsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebGetSubmitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebGetSubmitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubmitDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubmitDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSubmitUpdateCompletedEventHandler(object sender, GetSubmitUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubmitUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubmitUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubmitDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubmitDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SubmitShowCodeCompletedEventHandler(object sender, SubmitShowCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitShowCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitShowCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SubmitShowAdminLogCompletedEventHandler(object sender, SubmitShowAdminLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitShowAdminLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitShowAdminLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SubmitShowUserLogCompletedEventHandler(object sender, SubmitShowUserLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitShowUserLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitShowUserLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RejudgeSubmitCompletedEventHandler(object sender, RejudgeSubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RejudgeSubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RejudgeSubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool RejudgeSubmitResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool RejudgeSubmitResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteSubmitCompletedEventHandler(object sender, DeleteSubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool DeleteSubmitResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool DeleteSubmitResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTasksCompletedEventHandler(object sender, GetTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskCompletedEventHandler(object sender, GetTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTasksComlexityCompletedEventHandler(object sender, GetTasksComlexityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksComlexityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksComlexityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskComlexity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskComlexity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTasksSubjectCompletedEventHandler(object sender, GetTasksSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskComlexity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskComlexity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskStatementCompletedEventHandler(object sender, GetTaskStatementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateTaskCompletedEventHandler(object sender, CreateTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSubjectCompletedEventHandler(object sender, GetSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int GetSubjectResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetSubjectResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTaskStatementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateSubjectComlexityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTaskPdfStatementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteTaskPdfStatementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadTaskPdfStatementCompletedEventHandler(object sender, DownloadTaskPdfStatementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTaskPdfStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTaskPdfStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTaskExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddNewSubjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddNewComlexityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteSubjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteComlexityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateNewSubjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateNewComlexityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIDSubjectCompletedEventHandler(object sender, GetIDSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIDSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int GetIDSubjectResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetIDSubjectResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIDComlexityCompletedEventHandler(object sender, GetIDComlexityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDComlexityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIDComlexityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int GetIDComlexityResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool GetIDComlexityResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTitleSubjectCompletedEventHandler(object sender, GetTitleSubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleSubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleSubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTitleComlexityCompletedEventHandler(object sender, GetTitleComlexityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTitleComlexityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTitleComlexityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTestCompletedEventHandler(object sender, GetTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TestDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TestDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateTestCompletedEventHandler(object sender, CreateTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TestDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TestDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteTestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCheckerCompletedEventHandler(object sender, GetCheckerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckerDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckerDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateCheckerCompletedEventHandler(object sender, CreateCheckerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCheckerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCheckerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CheckerDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CheckerDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateCheckerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteCheckerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContestsCompletedEventHandler(object sender, GetContestsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContestsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContestsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContestDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContestDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContestCompletedEventHandler(object sender, GetContestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContestExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContestExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateContestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateGroupsForContestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateCompilersForContestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateTasksForContestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateContestCompletedEventHandler(object sender, CreateContestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateContestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateContestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContestExDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContestExDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteContestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetWellcomeTextCompletedEventHandler(object sender, GetWellcomeTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWellcomeTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWellcomeTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateWellcomeTextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetSponsorTextCompletedEventHandler(object sender, GetSponsorTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSponsorTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSponsorTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateSponsorTextCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContestTypesCompletedEventHandler(object sender, GetContestTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContestTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContestTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContestTypeDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContestTypeDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetLogForUserCompletedEventHandler(object sender, GetLogForUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLogForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LogForUserDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LogForUserDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllSettingsCompletedEventHandler(object sender, GetAllSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SettingDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SettingDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteSettingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddOrUpdateSettingCompletedEventHandler(object sender, AddOrUpdateSettingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrUpdateSettingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrUpdateSettingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int AddOrUpdateSettingResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool AddOrUpdateSettingResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAdminsCompletedEventHandler(object sender, GetAdminsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdminsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdminsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdminDTO[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdminDTO[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCollectionCompletedEventHandler(object sender, GetCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdminDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdminDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAdminCompletedEventHandler(object sender, GetAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdminDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdminDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCollectionAccessCompletedEventHandler(object sender, GetCollectionAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccessToPanel[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccessToPanel[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCollectionButtonsCompletedEventHandler(object sender, GetCollectionButtonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCollectionButtonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCollectionButtonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccessButtons[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccessButtons[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GenerateNewAdminPasswordCompletedEventHandler(object sender, GenerateNewAdminPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateNewAdminPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateNewAdminPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetNewPasswordForAdminAndSendByEmailCompletedEventHandler(object sender, GetNewPasswordForAdminAndSendByEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewPasswordForAdminAndSendByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewPasswordForAdminAndSendByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateNewPasswordUsebleCompletedEventHandler(object sender, CreateNewPasswordUsebleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewPasswordUsebleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewPasswordUsebleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateAdminCompletedEventHandler(object sender, CreateAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AdminDTO Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AdminDTO)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateAdminCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void WebUpdateAdminCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteAdminCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AccessAdminsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591